import{_ as r,c as s,o as n,aG as l,j as a,a as t}from"./chunks/framework.CdnsPyyz.js";const w=JSON.parse('{"title":"分治算法","description":"","frontmatter":{"title":"分治算法","author":"Zack Zheng","date":"2025/03/06 11:03","categories":["数据结构和算法"],"tags":["数据结构","算法"]},"headers":[],"relativePath":"others/dsa/A0数据结构和算法介绍/分治算法.md","filePath":"others/dsa/A0数据结构和算法介绍/分治算法.md","lastUpdated":1745564627000}'),i={name:"others/dsa/A0数据结构和算法介绍/分治算法.md"},o={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.832ex",height:"2.451ex",role:"img",focusable:"false",viewBox:"0 -833.2 2577.6 1083.2","aria-hidden":"true"},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.985ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 4855.6 1083.9","aria-hidden":"true"};function d(m,e,h,c,u,g){return n(),s("div",null,[e[9]||(e[9]=l(`<p>分治算法是一个通过以下步骤解决大型问题的策略</p><ol><li>将问题分解成更小的子问题</li><li>求解子问题</li><li>合并子问题并得到最终解</li></ol><p>为了使用分治算法，会用到递归。了解不同语言中的递归：</p><ul><li><a href="https://www.programiz.com/java-programming/recursion" target="_blank" rel="noreferrer">Java中的递归</a></li><li><a href="https://www.programiz.com/python-programming/recursion" target="_blank" rel="noreferrer">Python中的递归</a></li><li><a href="https://www.programiz.com/cpp-programming/recursion" target="_blank" rel="noreferrer">C++中的递归</a></li></ul><h4 id="分治算法是怎么运作的" tabindex="-1">分治算法是怎么运作的？ <a class="header-anchor" href="#分治算法是怎么运作的" aria-label="Permalink to &quot;分治算法是怎么运作的？&quot;">​</a></h4><p>以下是相关步骤：</p><ol><li>分：使用递归把给定问题分为子问题</li><li>治：用递归的方式解决较小的子问题。如果子问题足够小，直接求解</li><li>合并：将作为递归过程一部分的子问题的解进行合并，从而解决实际问题。</li></ol><p>通过一个例子来理解一下</p><p>下面，我们将使用分治法（也就是归并排序）对一个数组进行排序。</p><ol><li>给定一个数组如下：</li></ol><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/divide-and-conquer-0.webp" alt="数组"></p><ol start="2"><li>分：把数组分成2半</li></ol><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/divide-and-conquer-1.webp" alt="分数组"></p><p>继续递归的将每个子部分分成2半，直到分成1个元素</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/divide-and-conquer-2.webp" alt="分数组2"></p><ol start="3"><li>合并单个元素为一个有序的数组，这里，<code>治</code>和<code>合并</code>是同步进行的</li></ol><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/divide-and-conquer-3.webp" alt="治和合并"></p><h4 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h4><p>分治算法的时间复杂度通过<a href="./主定理.html">主定理</a>计算</p><div class="info custom-block"><p class="custom-block-title">备注</p><p>我这里就不翻译计算过程了，时间复杂度是: <code>O(n log n)</code></p></div><h4 id="分治-vs-动态规划" tabindex="-1">分治 VS 动态规划 <a class="header-anchor" href="#分治-vs-动态规划" aria-label="Permalink to &quot;分治 VS 动态规划&quot;">​</a></h4><p>分治法将一个问题分解为若干较小的子问题；这些子问题会通过递归的方式进一步求解。每个子问题的结果不会被存储起来供日后使用。然而，在动态规划方法中，每个子问题的结果都会被存储起来，以便之后参考。</p><p>当同一个子问题不会被多次求解时，使用分治法。当一个子问题的结果在未来需要被多次使用时，使用动态规划方法。</p><p>通过一个例子来理解一下。假设我们求一个斐波那契数列。那么，</p><h5 id="分治法" tabindex="-1">分治法 <a class="header-anchor" href="#分治法" aria-label="Permalink to &quot;分治法&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>fib(n)</span></span>
<span class="line"><span>   If n &lt; 2, return 1</span></span>
<span class="line"><span>   Else , return f(n - 1) + f(n - 2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-label="Permalink to &quot;动态规划&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>mem = []</span></span>
<span class="line"><span>fib(n)</span></span>
<span class="line"><span>    If n in mem: return mem[n]</span></span>
<span class="line"><span>    else,</span></span>
<span class="line"><span>      If n &lt; 2, f = 1</span></span>
<span class="line"><span>      else , f = f(n - 1) + f(n - 2)</span></span>
<span class="line"><span>      mem[n] = f</span></span>
<span class="line"><span>      return f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在动态规划中，<code>mem</code>存储了每一个子问题的结果</p><h4 id="分治算法的优点" tabindex="-1">分治算法的优点 <a class="header-anchor" href="#分治算法的优点" aria-label="Permalink to &quot;分治算法的优点&quot;">​</a></h4>`,30)),a("ul",null,[a("li",null,[e[4]||(e[4]=t("使用朴素方法进行两个矩阵相乘的时间复杂度是")),a("mjx-container",o,[(n(),s("svg",p,e[0]||(e[0]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),e[1]||(e[1]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("msup",null,[a("mi",null,"n"),a("mn",null,"3")]),a("mo",{stretchy:"false"},")")])],-1))]),e[5]||(e[5]=t("，而使用分治法（即施特拉森矩阵乘法）的时间复杂度是")),a("mjx-container",T,[(n(),s("svg",Q,e[2]||(e[2]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(2188.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(278,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)" style="stroke-width:3;"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1778,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4466.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),e[3]||(e[3]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("msup",null,[a("mi",null,"n"),a("mn",null,"2")]),a("mn",null,".8074"),a("mo",{stretchy:"false"},")")])],-1))]),e[6]||(e[6]=t("。分治还简化了其他问题，比如汉诺塔问题。"))]),e[7]||(e[7]=a("li",null,"分治适合多进程系统",-1)),e[8]||(e[8]=a("li",null,"高效的利用了内存缓存",-1))]),e[10]||(e[10]=a("h4",{id:"分治法的应用",tabindex:"-1"},[t("分治法的应用 "),a("a",{class:"header-anchor",href:"#分治法的应用","aria-label":'Permalink to "分治法的应用"'},"​")],-1)),e[11]||(e[11]=a("ul",null,[a("li",null,"二分查找"),a("li",null,"归并排序"),a("li",null,"快速排序"),a("li",null,"施特拉森矩阵乘法"),a("li",null,"卡拉苏巴算法")],-1))])}const f=r(i,[["render",d]]);export{w as __pageData,f as default};
