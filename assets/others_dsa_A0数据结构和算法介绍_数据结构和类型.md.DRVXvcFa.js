import{_ as t,c as e,o as l,aG as i}from"./chunks/framework.Bwfhi3i_.js";const m=JSON.parse('{"title":"数据结构和类型","description":"","frontmatter":{"title":"数据结构和类型","author":"Zack Zheng","date":"2025/03/06 11:07","categories":["数据结构和算法"],"tags":["数据结构","算法"]},"headers":[],"relativePath":"others/dsa/A0数据结构和算法介绍/数据结构和类型.md","filePath":"others/dsa/A0数据结构和算法介绍/数据结构和类型.md","lastUpdated":1745564627000}'),r={name:"others/dsa/A0数据结构和算法介绍/数据结构和类型.md"};function d(o,a,s,n,h,p){return l(),e("div",null,[...a[0]||(a[0]=[i('<h3 id="数据结构和类型" tabindex="-1">数据结构和类型 <a class="header-anchor" href="#数据结构和类型" aria-label="Permalink to &quot;数据结构和类型&quot;">​</a></h3><h4 id="什么是数据结构" tabindex="-1">什么是数据结构 <a class="header-anchor" href="#什么是数据结构" aria-label="Permalink to &quot;什么是数据结构&quot;">​</a></h4><p>数据结构是一种用于存储和组织数据的存储方式。它是一种在计算机上排列数据的方式，以便能够高效地访问和更新数据。</p><p>根据你的项目和需求情况，为你的项目选择合适的数据结构是很重要的。例如，如果你想在内存中按顺序存储数据，那么你可以选择数组这种数据结构。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/array_dsa.png" alt="数组数据结构的表现形式" loading="lazy"></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>数据结构和数据类型略有不同。数据结构是按照特定顺序排列的数据类型的集合。</p></div><h4 id="数据结构的类型" tabindex="-1">数据结构的类型 <a class="header-anchor" href="#数据结构的类型" aria-label="Permalink to &quot;数据结构的类型&quot;">​</a></h4><p>大体上，数据结构可分为两类：</p><ul><li>线性数据结构</li><li>非线性数据结构</li></ul><p>让我们详细了解下每种类型</p><h4 id="线性数据结构" tabindex="-1">线性数据结构 <a class="header-anchor" href="#线性数据结构" aria-label="Permalink to &quot;线性数据结构&quot;">​</a></h4><p>在线性数据结构中，元素一个接一个地按顺序排列。由于元素是按特定顺序排列的，所以它们易于实现。</p><p>然而，当程序的复杂性增加时，由于操作上的复杂性，线性数据结构可能并非最佳选择。</p><p>常见的线性数据结构有：</p><h5 id="_1-数组数据结构" tabindex="-1">1. 数组数据结构 <a class="header-anchor" href="#_1-数组数据结构" aria-label="Permalink to &quot;1. 数组数据结构&quot;">​</a></h5><p>在数组中，内存中的元素是在连续的内存空间中排列的。一个数组中的元素是同一个类型的。而且，能够以数组形式存储的元素类型是由编程语言决定的。</p><p>欲了解更多信息，请访问 “<a href="https://www.programiz.com/java-programming/arrays" target="_blank" rel="noreferrer">Java 数组</a>” 相关内容。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/array_.png" alt="数组元素用索引表示" loading="lazy"></p><div class="text-center font-bold">数组元素用索引表示</div><h5 id="_2-栈数据结构" tabindex="-1">2. 栈数据结构 <a class="header-anchor" href="#_2-栈数据结构" aria-label="Permalink to &quot;2. 栈数据结构&quot;">​</a></h5><p>在栈数据结构中，元素是按照后进先出（LIFO）原则存储的。也就是说，最后存入栈中的元素会最先被移除。</p><p>它的工作原理就像一摞盘子，放在这摞盘子最上面的最后一个盘子会最先被拿走。欲了解更多信息，请访问 “<a href="./../A1数据结构I/栈.html">栈数据结构</a>” 相关内容。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/stack_dsa.png" alt="栈操作" loading="lazy"></p><div class="text-center font-bold">在栈中，操作只能从一端（此处指栈顶）进行。</div><h5 id="_3-队列数据结构" tabindex="-1">3. 队列数据结构 <a class="header-anchor" href="#_3-队列数据结构" aria-label="Permalink to &quot;3. 队列数据结构&quot;">​</a></h5><p>与栈不同，队列数据结构遵循先进先出（FIFO）原则，即最先存储在队列中的元素将最先被移除。</p><p>它就像在售票柜台前排队的人群一样，排在队伍最前面的人会最先买到票。想要了解更多信息，请访问 “<a href="./../A1数据结构I/队列.html">队列数据结构</a>” 相关内容。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/queue_dsa.png" alt="队列操作" loading="lazy"></p><div class="text-center font-bold">在队列中，元素的添加和移除是从不同的两端进行的。</div><h5 id="_4-链表数据结构" tabindex="-1">4. 链表数据结构 <a class="header-anchor" href="#_4-链表数据结构" aria-label="Permalink to &quot;4. 链表数据结构&quot;">​</a></h5><p>在链表数据结构中，数据元素通过一系列的节点相互连接。并且，每个节点都包含数据项以及指向下一个节点的地址。</p><p>欲了解更多信息，请访问 “<a href="./../A2数据结构II/链表.html">链表数据结构</a>” 相关内容。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/linked-list_dsa.png" alt="链表" loading="lazy"></p><div class="text-center font-bold">链表</div><h4 id="非线性数据结构" tabindex="-1">非线性数据结构 <a class="header-anchor" href="#非线性数据结构" aria-label="Permalink to &quot;非线性数据结构&quot;">​</a></h4><p>与线性数据结构不同，非线性数据结构中的元素没有任何顺序。相反，它们是以分层的方式排列的，其中一个元素会与一个或多个元素相连。</p><p>非线性数据结构进一步分为基于图和基于树的数据结构。</p><h5 id="_1-图数据结构" tabindex="-1">1. 图数据结构 <a class="header-anchor" href="#_1-图数据结构" aria-label="Permalink to &quot;1. 图数据结构&quot;">​</a></h5><p>在图数据结构中，每个节点被称为顶点，并且每个顶点都通过边与其他顶点相连。</p><p>想要了解更多内容，请访问 “图数据结构” 相关信息。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/graph_dsa.png" alt="图数据结构" loading="lazy"></p><div class="text-center font-bold">图数据结构</div><div class="font-bold">常用的基于图的数据结构：</div><ul><li>生成树和最小生成树</li><li>强连通分量</li><li>邻接矩阵</li><li>邻接表</li></ul><h5 id="_2-树数据结构" tabindex="-1">2. 树数据结构 <a class="header-anchor" href="#_2-树数据结构" aria-label="Permalink to &quot;2. 树数据结构&quot;">​</a></h5><p>与图类似，树也是顶点和边的集合。然而，在树数据结构中，两个顶点之间只能有一条边。</p><p>欲了解更多信息，请访问 “树数据结构” 相关内容。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/tree_dsa.png" alt="树数据结构" loading="lazy"></p><div class="text-center font-bold">树数据结构</div><div class="font-bold">常用的基于树的数据结构：</div><ul><li>二叉树</li><li>二叉搜索树</li><li>AVL树</li><li>B树</li><li>B+树</li><li>红黑树</li></ul><h4 id="线性-vs-非线性数据结构" tabindex="-1">线性 Vs 非线性数据结构 <a class="header-anchor" href="#线性-vs-非线性数据结构" aria-label="Permalink to &quot;线性 Vs 非线性数据结构&quot;">​</a></h4><p>既然我们已经了解了线性数据结构和非线性数据结构，那我们来看看它们之间的主要区别吧。</p><table tabindex="0"><thead><tr><th>线性数据结构</th><th>非线性数据结构</th></tr></thead><tbody><tr><td>数据项按顺序依次排列，一个接一个</td><td>数据项是以非顺序（分层）的方式排列的</td></tr><tr><td>所有的数据项都存在于单一层次上</td><td>数据项存在于不同的层次中</td></tr><tr><td>它可以在一次遍历中完成。也就是说，如果我们从第一个元素开始，我们能够在一次遍历过程中按顺序遍历所有元素。</td><td>它需要多次遍历。也就是说，如果我们从第一个元素开始，可能无法在一次遍历中遍历所有元素。</td></tr><tr><td>内存利用率不高</td><td>不同的结构会根据需求以不同的高效方式来利用内存</td></tr><tr><td>时间复杂度会随着数据规模的增大而增加</td><td>时间复杂度保持不变</td></tr><tr><td>例子：数组、栈、队列</td><td>例子：树、图、映射</td></tr></tbody></table><h4 id="为什么需要数据结构" tabindex="-1">为什么需要数据结构 <a class="header-anchor" href="#为什么需要数据结构" aria-label="Permalink to &quot;为什么需要数据结构&quot;">​</a></h4><p>关于数据结构的知识能帮助你理解每种数据结构的工作原理。基于此，你可以为自己的项目选择合适的数据结构。 这有助于你编写在内存和时间方面都高效的代码。 若想进一步了解数据结构的重要性，请访问 “<a href="./为什么学习数据结构和算法.html">为什么要学习数据结构？</a>”</p>',56)])])}const g=t(r,[["render",d]]);export{m as __pageData,g as default};
