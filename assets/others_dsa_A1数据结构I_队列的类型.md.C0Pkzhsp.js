import{_ as e,c as t,o as i,aG as l}from"./chunks/framework.CAL16D-w.js";const m=JSON.parse('{"title":"队列的类型","description":"","frontmatter":{"title":"队列的类型","author":"Zack Zheng","date":"2025/03/06 11:00","categories":["数据结构和算法"],"tags":["数据结构","算法"]},"headers":[],"relativePath":"others/dsa/A1数据结构I/队列的类型.md","filePath":"others/dsa/A1数据结构I/队列的类型.md","lastUpdated":1742351701000}'),r={name:"others/dsa/A1数据结构I/队列的类型.md"};function p(o,a,s,h,n,c){return i(),t("div",null,[...a[0]||(a[0]=[l('<p>有4种不同的队列类型：</p><ul><li>普通队列</li><li>循环队列</li><li>优先队列</li><li>双端队列</li></ul><h4 id="普通队列" tabindex="-1">普通队列 <a class="header-anchor" href="#普通队列" aria-label="Permalink to &quot;普通队列&quot;">​</a></h4><p>在普通队列中，在尾部插入，在头部取出。严格遵守FIFO(先入先出)原则</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/simple-queue_0.webp" alt="普通队列展示" loading="lazy"></p><p>欲知更多，访问<a href="./队列.html">队列</a>一节</p><h4 id="循环队列" tabindex="-1">循环队列 <a class="header-anchor" href="#循环队列" aria-label="Permalink to &quot;循环队列&quot;">​</a></h4><p>在循环队列中，最后一个元素指向第一个元素，从而形成一个环形链接。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/circular-queue.webp" alt="循环队列展示" loading="lazy"></p><p>循环队列相较于普通队列的主要优势在于能更有效地利用内存。如果循环队列的最后一个位置已满，而第一个位置为空，我们就可以在第一个位置插入一个元素。但在普通队列中，这种操作是无法实现的。</p><p>欲知更多，访问<a href="./循环队列.html">循环队列</a>一节</p><h4 id="优先队列" tabindex="-1">优先队列 <a class="header-anchor" href="#优先队列" aria-label="Permalink to &quot;优先队列&quot;">​</a></h4><p>优先队列是一种特殊类型的队列，在这种队列中，每个元素都与一个优先级相关联，并且是根据其优先级来进行处理（出队）的。如果出现具有相同优先级的元素，那么这些元素将按照它们在队列中的顺序来进行处理（出队）。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/priority-queue.webp" alt="优先队列展示" loading="lazy"></p><p>插入操作是基于值的到达情况来进行的，而删除操作则是依据优先级来执行的。</p><p>欲知更多，访问<a href="./优先队列.html">优先队列</a>一节</p><h4 id="双端队列" tabindex="-1">双端队列 <a class="header-anchor" href="#双端队列" aria-label="Permalink to &quot;双端队列&quot;">​</a></h4><p>在双端队列中，元素的插入和删除操作既可以在前端进行，也可以在后端进行。因此，它并不遵循先进先出（FIFO）的规则。</p><p><img src="https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/double-ended-queue.webp" alt="双端队列" loading="lazy"></p><p>欲知更多，访问<a href="./双端队列.html">双端队列</a>一节</p>',20)])])}const _=e(r,[["render",p]]);export{m as __pageData,_ as default};
