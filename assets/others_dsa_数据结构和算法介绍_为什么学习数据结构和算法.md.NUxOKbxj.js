import{_ as l,c as i,o as n,aG as t,j as s,a as e}from"./chunks/framework.CdnsPyyz.js";const F=JSON.parse('{"title":"为什么学习数据结构和算法","description":"","frontmatter":{"title":"为什么学习数据结构和算法","author":"Zack Zheng","date":"2025/03/06 11:06","categories":["数据结构和算法"],"tags":["数据结构","算法"]},"headers":[],"relativePath":"others/dsa/数据结构和算法介绍/为什么学习数据结构和算法.md","filePath":"others/dsa/数据结构和算法介绍/为什么学习数据结构和算法.md","lastUpdated":1741684886000}'),p={name:"others/dsa/数据结构和算法介绍/为什么学习数据结构和算法.md"},r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.05ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 1790.1 886","aria-hidden":"true"},d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},o={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"28.628ex",height:"2.52ex",role:"img",focusable:"false",viewBox:"0 -864 12653.5 1114","aria-hidden":"true"},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"15.526ex",height:"2.14ex",role:"img",focusable:"false",viewBox:"0 -864 6862.6 946","aria-hidden":"true"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.25ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 1436.6 886","aria-hidden":"true"};function c(g,a,u,D,B,y){return n(),i("div",null,[a[13]||(a[13]=t(`<p>本文是为那些刚刚开始学习算法，并好奇算法对提升他们的职业发展或编程技能会有多大影响的人而写的。同时，本文也适合那些想知道为什么像谷歌、脸书和亚马逊这样的大公司会聘请那些在优化算法方面极为出色的程序员的人阅读。</p><h4 id="什么是算法" tabindex="-1">什么是算法 <a class="header-anchor" href="#什么是算法" aria-label="Permalink to &quot;什么是算法&quot;">​</a></h4><p>通俗地说，算法只不过是对解决问题的步骤的一种描述。它们本质上就是一种解决方案。</p><p>例如，一个用于解决求阶乘问题的算法可能是下面这样的：</p><h3>问题：求 n 的阶乘</h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>初始化阶乘值 fact = 1</span></span>
<span class="line"><span>对于从 1 到 n 范围内的每一个值 v：</span></span>
<span class="line"><span>将 fact 乘以 v</span></span>
<span class="line"><span>此时 fact 中存储的就是 n 的阶乘值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面这个算法是用中文写的。如果它是用编程语言编写的，我们就会称其为代码。下面是一段用 C++ 语言求一个数的阶乘的代码。</p><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> factorial</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> fact </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">&lt;=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> n</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> v</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">++</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">        fact </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;"> fact </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;"> v</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> fact</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>编程完全围绕着数据结构和算法展开。数据结构用于存储数据，而算法则用于利用这些数据来解决问题。</p><p>数据结构与算法（DSA）会详细研究标准问题的解决方案，让你深入了解使用每一种方案的效率情况。它还会教你评估算法效率的科学方法。这能让你从多种选择中选出最佳方案。</p><h4 id="利用数据结构和算法使你的代码具备可扩展性" tabindex="-1">利用数据结构和算法使你的代码具备可扩展性 <a class="header-anchor" href="#利用数据结构和算法使你的代码具备可扩展性" aria-label="Permalink to &quot;利用数据结构和算法使你的代码具备可扩展性&quot;">​</a></h4><p><code>时间是宝贵的</code></p>`,12)),s("p",null,[a[2]||(a[2]=e("假设，Alice和Bob正尝试解决一个简单问题即求前")),s("mjx-container",r,[(n(),i("svg",h,a[0]||(a[0]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1)]))),a[1]||(a[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mn",null,"10"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"11")])])])],-1))]),a[3]||(a[3]=e("个自然数的和。当Bob还在写算法的时候，Alice已经解决了这个问题，Alice证明，解决这个问题就像dis川普一样简单。"))]),a[14]||(a[14]=t(`<h3>算法(Bob提供)</h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>初始化 sum = 0</span></span>
<span class="line"><span>循环从1到10^11(包含10^11),对每一个数n</span></span>
<span class="line"><span>  把n加到sum</span></span>
<span class="line"><span>sum就是要的结果</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3>代码(Alice提供)</h3><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> findSum</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> sum </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">&lt;=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100000000000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> v</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">++</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">        sum </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">+=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;"> v</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> sum</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Alice和Bob对自己几乎没花什么时间就完成了自己的成果感到欣喜若狂。让我们悄悄走进他们的工作间，听听他们的对话吧。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>Alice：咱们运行一下这段代码，然后算出总和吧。</span></span>
<span class="line"><span>Bob：我几分钟前就运行了这段代码，但它到现在还没显示出结果。这是怎么回事啊？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>啊西八，出问题了！计算机是最具确定性的机器。回过头再试着运行一遍可解决不了问题。所以，咱们来分析一下这段简单的代码出了什么毛病吧。</p><p>对于一个计算机程序而言，<span class="font-bold text-red">时间</span>和<span class="font-bold text-red">内存</span>是两种最宝贵的资源。</p><p>计算机运行代码所花费的时间是：</p><p><code>代码运行时间 = 指令数量 × 每条指令的执行时间</code></p><p>指令的数量取决于你使用的代码，每一个代码执行的时间取决于你的机器和编译器</p><p>在上面的例子中，执行指令的总数量(称为x)是</p>`,12)),s("p",null,[s("mjx-container",d,[(n(),i("svg",o,a[4]||(a[4]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2627.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3628,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(4017,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(6029.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(7029.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(7529.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8140.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(9141,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(11153.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(12153.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1)]))),a[5]||(a[5]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"x"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mn",null,"10"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"11")])]),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("msup",null,[s("mn",null,"10"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"11")])]),s("mo",null,"+"),s("mn",null,"1")])],-1))]),a[8]||(a[8]=e("，也就是")),s("mjx-container",T,[(n(),i("svg",Q,a[6]||(a[6]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2627.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(3350,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(5362.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(6362.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g>',1)]))),a[7]||(a[7]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"x"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"∗"),s("msup",null,[s("mn",null,"10"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"11")])]),s("mo",null,"+"),s("mn",null,"3")])],-1))])]),s("p",null,[a[11]||(a[11]=e("我们假设一台计算机每秒可以执行")),s("mjx-container",k,[(n(),i("svg",m,a[9]||(a[9]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)]))),a[10]||(a[10]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mn",null,"10"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"8")])])])],-1))]),a[12]||(a[12]=e("条指令（具体数值会因机器配置不同而有所变化）。那么运行上述代码所花费的时间是"))]),a[15]||(a[15]=t(`<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>运行y条指令所需时间 = 1 秒</span></span>
<span class="line"><span>运行 1 条指令所需时间 = 1/y 秒</span></span>
<span class="line"><span>运行 x 条指令所需时间 = x × (1/y) 秒 = x/y 秒</span></span>
<span class="line"><span>因此，</span></span>
<span class="line"><span>代码运行时间 = x/y</span></span>
<span class="line"><span>= (2×10^11+3)/10^8（超过 33 分钟）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>有没有可能优化这个算法，让Alice和Bob每次运行这个代码的时候不用等半个钟头呢？</p><p>我想你已经猜到了正确的方法，前N个自然数的和由这个公式求得：</p><p><code>Sum = N * (N + 1) / 2</code></p><p>转换成代码，就是这样：</p><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> sum</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> N</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> N </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">N </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;"> /</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这段代码仅通过一条指令就能执行完毕并完成任务，无论数值是多少都没问题。哪怕这个数值比宇宙中原子的总数还要大，它也能瞬间得出结果。</p><p>如此解决问题，所花费的时间是1/y（也就是 10 纳秒）。顺便说一下，一颗氢弹的核聚变反应需要40到50纳秒，这意味着即使有人在你运行代码的同时向你的电脑扔一颗氢弹，你的程序也会成功完成。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>计算机在计算乘法和除法时会执行几条指令（并非一条）。刚才说只需要一条指令只是为了表述简便而已。</p></div><h4 id="更多可扩展性" tabindex="-1">更多可扩展性 <a class="header-anchor" href="#更多可扩展性" aria-label="Permalink to &quot;更多可扩展性&quot;">​</a></h4><p>可扩展性（Scalability）是 “规模（scale）” 加上 “能力（ability）”，这意味着一个算法或系统处理更大规模问题的能力特质。</p><p>考虑布置一间能容纳 50 名学生的教室这一问题。其中一个最简单的解决方案就是预订一间教室，准备一块黑板和几支粉笔，这样问题就解决了。</p><h4>但是如果问题的规模变大了呢？如果学生数量增加到200呢？</h4><p>之前的解决方案仍然可行但是需要更多的资源。在这个例子里，你可能需要更大的屋子（可能得是一个礼堂）、一块投影屏幕以及一支电子笔。</p><h4>如果学生数量增加到1000呢？</h4><p>当问题的规模增大时，这个解决方案要么无法奏效，要么就得消耗大量资源。这就意味着，你之前的解决方案不具备可扩展性。</p><h4>那么，什么样的解决方案才是具有可扩展性的呢？</h4><p>以<a href="https://www.khanacademy.org/" target="_blank" rel="noreferrer">可汗学院（Khan Academy）</a>这样的网站为例，数百万的学生能够同时观看视频、阅读解答内容，而且并不需要更多额外的资源。所以，这种解决方案能够在资源有限的情况下处理更大规模的问题。</p><p>如果你看一下我们之前第一个那个求前N个自然数之和的解决方案，是不具备可扩展性的。这是因为随着问题规模呈线性增长，其所需的时间也呈线性增长。这样的算法也被称为线性可扩展算法。</p><p>我们的第二种解决方案具有很强的可扩展性，并且在解决更大规模的问题时无需再花费更多时间。这类算法被称为常数时间算法。</p><h4 id="内存是很昂贵的" tabindex="-1">内存是很昂贵的 <a class="header-anchor" href="#内存是很昂贵的" aria-label="Permalink to &quot;内存是很昂贵的&quot;">​</a></h4><p>内存并不总是充足可用的。当处理那些需要你存储或生成大量数据的代码或系统时，对于你的算法而言，尽可能地节省内存使用是至关重要的。</p><p>例如：在存储有关人员的数据时，你可以通过仅存储他们的出生日期而不是年龄来节省内存。你总是可以根据他们的出生日期和当前日期即时计算出年龄。</p><h4 id="算法提高效率的一些例子" tabindex="-1">算法提高效率的一些例子 <a class="header-anchor" href="#算法提高效率的一些例子" aria-label="Permalink to &quot;算法提高效率的一些例子&quot;">​</a></h4><p>学习算法和数据结构可以让你做到以下：</p><h4 id="例子1-年龄组问题" tabindex="-1">例子1: 年龄组问题 <a class="header-anchor" href="#例子1-年龄组问题" aria-label="Permalink to &quot;例子1: 年龄组问题&quot;">​</a></h4><p>像查找某个特定年龄组人群这样的问题，只要对<a href="https://www.programiz.com/dsa/binary-search" target="_blank" rel="noreferrer">二分查找算法</a>稍作修改（假设数据是已排序的），就能够轻松解决。</p><p>那种逐个查看所有人，并检查其是否属于给定年龄组的朴素算法是线性可扩展的。然而，二分查找算法是一种对数可扩展的算法。这意味着如果问题的规模变为原来的平方，解决该问题所花费的时间仅仅会翻倍。</p><p>假如，从1000个人里找给定年龄的人二分查找需要1秒。那么对于100万人来说，</p><ul><li>二分查找算法仅仅需要2秒解决问题</li><li>朴素算法可能需要1百万秒，大约是12天</li></ul><p>同样的二分查找算法也可用于求一个数的平方根。</p><hr><h4 id="例子2-魔方问题" tabindex="-1">例子2: 魔方问题 <a class="header-anchor" href="#例子2-魔方问题" aria-label="Permalink to &quot;例子2: 魔方问题&quot;">​</a></h4><p>想象你在写一个解魔方的程序。</p><p>这个看起来可爱的魔方竟然有着令人头疼的 43,252,003,274,489,856,000 种状态，而这些还仅仅只是状态而已！想象一下，为了达到那些错误的状态，可能会走过的路径数量。</p><p>幸运的是，解决这个问题的方式可以通过<a href="https://www.programiz.com/dsa/graph" target="_blank" rel="noreferrer">图数据结构</a>。有一种被称为迪杰斯特拉的图算法(<a href="https://www.programiz.com/dsa/dijkstra-algorithm" target="_blank" rel="noreferrer">Dijkstra&#39;s algorithm</a>)，它能让你在线性时间内解决这个问题。没错，你没听错。这意味着它能让你以最少的状态数达到已还原的状态。</p><hr><h4 id="例子3-dna问题" tabindex="-1">例子3: DNA问题 <a class="header-anchor" href="#例子3-dna问题" aria-label="Permalink to &quot;例子3: DNA问题&quot;">​</a></h4><p>DNA是一种携带遗传信息的分子。它们由更小的单位组成，这些单位用罗马字母 A、C、T 和 G 来表示。</p><p>想象一下你在生物信息学领域工作。你被分配了一项任务，那就是找出某一特定模式在一条 DNA 链中出现的情况。</p><p>这是计算机科学学术领域里的一个著名问题。并且，最简单的算法所花费的时间与<code>（DNA 链中的字符数量）*（模式中的字符数量）</code>成正比。</p><p>一条典型的DNA链包含数百万个这样的单位。别担心。科克伦奥科特马努拉算法（<a href="https://www.ics.uci.edu/~eppstein/161/960227.html" target="_blank" rel="noreferrer">KMP 算法</a>）能够在与<code>（DNA 链中的字符数量）+（模式中的字符数量）</code>成正比的时间内完成这项任务。</p><p>将乘号<code>（*）</code>替换为加号<code>（+）</code>带来了很大的变化。</p><p>想一下，如果模式是由 100 个字符组成的，那么你的算法现在就快了 100 倍。如果模式是由1000个字符组成的，KMP 算法几乎会快1000倍。也就是说，如果你原本能够在1秒钟内找到模式出现的位置，现在只需要1毫秒。我们也可以换一种方式来理解。以前匹配1条链的时间，现在你可以在相同的时间里匹配1000条！</p><div class="info custom-block"><p class="custom-block-title">备注（非原文译）</p><p>我们这里来算一下：假设DNA链中字符是10000000，模式中字符是100<br> 乘号的规模是：10000000<em>100=1000000000<br> 加号的规模是：10000000+100=10000100<br> 乘号是加号的100倍<br> 所以上文中，如果模式的字符编程增加到1000<br> 乘号规模是：10000000</em>1000=10000000000<br> 加号规模是：10000000+1000=10001000<br> 因为DNA链中的字符数量远远的大，使用乘号规模又增大了10倍<br> 加号忽略零头，几乎不怎么增加，所以KMP算法几乎会快1000倍</p></div><p>这样的例子数不胜数……</p><hr><h4 id="结束语" tabindex="-1">结束语 <a class="header-anchor" href="#结束语" aria-label="Permalink to &quot;结束语&quot;">​</a></h4><p>一般来说，软件开发涉及到每天学习新技术。你的项目里一边用这些技术，一边学这些技术，基本可以学个七七八八。但是算法不是这样的。</p><p>如果你不了解算法，你就不知道你现在写的代码能不能优化。人们期望你提前了解这些算法，并在任何可能且关键的地方应用它们。</p><p>我们专门讨论了算法的可扩展性。一个软件系统由许多这样的算法组成。对其中任何一个算法进行优化都会使整个系统变得更好。</p><p>然而，需要着重指出的是，这并非是让系统具备可扩展性的唯一方法。举例来说，有一种被称为<a href="https://en.wikipedia.org/wiki/Distributed_computing" target="_blank" rel="noreferrer">分布式计算</a>的技术，它能让一个程序中相互独立的部分同时在多台机器上运行，从而使系统更具可扩展性。</p>`,52))])}const H=l(p,[["render",c]]);export{F as __pageData,H as default};
