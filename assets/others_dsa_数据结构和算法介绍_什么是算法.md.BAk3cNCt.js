import{_ as p,c as e,o as l,aG as n,j as a,a as t}from"./chunks/framework.CdnsPyyz.js";const g=JSON.parse('{"title":"什么是算法","description":"","frontmatter":{"title":"什么是算法","author":"Zack Zheng","date":"2025/03/06 11:08","categories":["数据结构和算法"],"tags":["数据结构","算法"]},"headers":[],"relativePath":"others/dsa/数据结构和算法介绍/什么是算法.md","filePath":"others/dsa/数据结构和算法介绍/什么是算法.md","lastUpdated":1741336313000}'),r={name:"others/dsa/数据结构和算法介绍/什么是算法.md"},i={id:"算法3-求一元二次方程的根",tabindex:"-1"},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},o={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"18.163ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 8028 1083.9","aria-hidden":"true"};function T(d,s,m,c,h,u){return l(),e("div",null,[s[5]||(s[5]=n(`<h3 id="什么是算法" tabindex="-1">什么是算法 <a class="header-anchor" href="#什么是算法" aria-label="Permalink to &quot;什么是算法&quot;">​</a></h3><p>从计算机编程的角度来讲，算法是解决特定的问题的一套定义明确的指令集。它接受一组输入，并产生期望的输出。例如，</p><p>一个两数相加的算法：</p><ol><li>获得两个数字的输入</li><li>使用<code>+</code>运算符将数字相加</li><li>显示计算结果</li></ol><hr><h3 id="何为一个好算法" tabindex="-1">何为一个好算法 <a class="header-anchor" href="#何为一个好算法" aria-label="Permalink to &quot;何为一个好算法&quot;">​</a></h3><ul><li>输入和输出应该被精确定义</li><li>算法中的每一个步骤都应该清晰明确，不存在歧义</li><li>在解决一个问题的众多不同方法中，算法应该是最为高效的。</li><li>算法不应包含计算机代码。相反，算法的编写方式应使其能够在不同的编程语言中使用。</li></ul><hr><h3 id="算法例子" tabindex="-1">算法例子 <a class="header-anchor" href="#算法例子" aria-label="Permalink to &quot;算法例子&quot;">​</a></h3><h5 id="算法1-相加用户输入的2个数字" tabindex="-1">算法1: 相加用户输入的2个数字 <a class="header-anchor" href="#算法1-相加用户输入的2个数字" aria-label="Permalink to &quot;算法1: 相加用户输入的2个数字&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>步骤 1: 开始</span></span>
<span class="line"><span>步骤 2: 声明变量 num1, num2 和 sum</span></span>
<span class="line"><span>步骤 3: 读变量 num1 和 num2</span></span>
<span class="line"><span>步骤 4: num1 和 num2 相加并把结果赋值给sum. sum &lt;- num1 + num2</span></span>
<span class="line"><span>步骤 5: 展示num</span></span>
<span class="line"><span>步骤 6: 结束</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="算法2-在3个数字中找到最大的数字" tabindex="-1">算法2: 在3个数字中找到最大的数字 <a class="header-anchor" href="#算法2-在3个数字中找到最大的数字" aria-label="Permalink to &quot;算法2: 在3个数字中找到最大的数字&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>步骤 1: 开始</span></span>
<span class="line"><span>步骤 2: 声明变量a, b和c</span></span>
<span class="line"><span>步骤 3: 读取变量a, b和c</span></span>
<span class="line"><span>步骤 4: 如果 a &gt; b</span></span>
<span class="line"><span>          如果 a &gt; c</span></span>
<span class="line"><span>            输出 a 是最大的数字</span></span>
<span class="line"><span>          否则 </span></span>
<span class="line"><span>            输出 c 是最大的数字</span></span>
<span class="line"><span>        否则</span></span>
<span class="line"><span>          如果 b &gt; c</span></span>
<span class="line"><span>            输出 b 是最大的数字</span></span>
<span class="line"><span>          否则</span></span>
<span class="line"><span>            输出 c 是最大的数字</span></span>
<span class="line"><span>步骤 5: 停止</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,13)),a("h5",i,[s[2]||(s[2]=t("算法3: 求一元二次方程的根 ")),a("mjx-container",Q,[(l(),e("svg",o,s[0]||(s[0]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(918,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2148.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3149,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3578,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4372.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5372.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6083.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(7139,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(7639,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[1]||(s[1]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mo",{stretchy:"false"},"("),a("mi",null,"a"),a("msup",null,[a("mi",null,"x"),a("mn",null,"2")]),a("mo",null,"+"),a("mi",null,"b"),a("mi",null,"x"),a("mo",null,"+"),a("mi",null,"c"),a("mo",null,"="),a("mn",null,"0"),a("mo",{stretchy:"false"},")")])],-1))]),s[3]||(s[3]=t()),s[4]||(s[4]=a("a",{class:"header-anchor",href:"#算法3-求一元二次方程的根","aria-label":'Permalink to "算法3: 求一元二次方程的根 $(ax^2 + bx + c = 0)$"'},"​",-1))]),s[6]||(s[6]=n(`<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>步骤 1: 开始</span></span>
<span class="line"><span>步骤 2: 声明变量 a, b, c, D, x1, x2, rp 和 ip</span></span>
<span class="line"><span>步骤 3: 计算判别式 D &lt;- b^2-4ac</span></span>
<span class="line"><span>步骤 4: 如果 D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1))])}const _=p(r,[["render",T]]);export{g as __pageData,_ as default};
