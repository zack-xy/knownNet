import{_ as o}from"./chunks/MyCodes.DS-ipe7_.js";import{_ as r,c as l,o as s,j as e,b as n,w as u,G as c,aH as f}from"./chunks/framework.DsljODgs.js";import"./chunks/theme.UfwQV9zf.js";const b=JSON.parse('{"title":"useRef的特性","description":"","frontmatter":{"title":"useRef的特性","author":"Zack Zheng","date":"2025/02/25 14:05","categories":["何以编程"],"tags":["React","Remote Code"]},"headers":[],"relativePath":"others/feature/React特性/useRef的特性.md","filePath":"others/feature/React特性/useRef的特性.md","lastUpdated":1759206491000}'),i={name:"others/feature/React特性/useRef的特性.md"};function d(p,t,m,_,R,h){const a=o;return s(),l("div",null,[t[0]||(t[0]=e("p",null,"作用：需要处理DOM元素或需要在组件渲染之间保持持久性数据",-1)),(s(),n(f,null,{default:u(()=>[c(a,{repo:"o-bricks",path:"demoCodes/React/react-demo/src/useRefDemo.jsx",lang:"js",lazy:""})]),_:1})),t[1]||(t[1]=e("div",{class:"warning custom-block"},[e("p",{class:"custom-block-title"},"注意"),e("ol",null,[e("li",null,"组件在重新渲染的时候，useRef的值不会被重新初始化"),e("li",null,"改变ref的current属性不会引起组件重新渲染，因为ref是一个普通的js对象"),e("li",null,"useRef的值不能作为useEffect等其他hooks的依赖项，因为它不是一个响应式状态"),e("li",null,"useRef不能直接获取子组件的实例，需要使用forwardRef")])],-1))])}const j=r(i,[["render",d]]);export{b as __pageData,j as default};
