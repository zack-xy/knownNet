import{_ as n}from"./chunks/theme.D2WgP2bZ.js";import{_ as l,c as t,o as h,aG as i,G as k}from"./chunks/framework.DsljODgs.js";const A=JSON.parse('{"title":"位运算 - 右移动运算","description":"","frontmatter":{"title":"位运算 - 右移动运算","author":"Zack Zheng","date":"2025/05/08 11:10","categories":["何以编程"],"tags":["算法"]},"headers":[],"relativePath":"others/feature/算法特性/右移运算.md","filePath":"others/feature/算法特性/右移运算.md","lastUpdated":1748322952000}'),p={name:"others/feature/算法特性/右移运算.md"};function e(r,s,B,F,d,D){const a=n;return h(),t("div",null,[s[0]||(s[0]=i("<h5>无符号整数(逻辑右移)`&gt;&gt;&gt;`</h5><ul><li>右移n的操作就是二进制右边n位舍弃，左面补n个0</li><li>十进制的结果可以记为：右移n位，即为整数除以2的n次方，结果向下取整(比如<code>19 &gt;&gt; 2 =&gt; 19 / 4 =&gt; 4.75 =&gt; 4</code>)</li></ul><h5>有符号整数(算术右移)`&gt;&gt;`</h5><ul><li>右移n的操作就是二进制右边n位舍弃，左面补n个符号位的值（正数补 0，负数补1）</li><li>十进制的结果可以记为：右移n位，即为整数除以2的n次方，结果向下取整(比如<code>-19 &gt;&gt; 2 =&gt; -19 / 4 =&gt; -4.75 =&gt; -5</code>)</li></ul>",4)),k(a,{src:"https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/左移右移对比.png"}),s[1]||(s[1]=i(`<div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>没有无符号左移，没有逻辑左移</p></div><div class="warning custom-block"><p class="custom-block-title">为什么不只搞1个右移操作符？</p><ol><li><p>可移植性与定义不明确 在 C/C++ 中，&gt;&gt; 用于有符号整数时，标准规定是“实现定义”<br> 也就是说不同编译器、不同 CPU，结果可能不同</p></li><li><p>可控性（语言语义明确 vs 智能猜测）</p></li></ol><p>语言设计者倾向于：</p><ul><li>明确告诉你：你写<code>&gt;&gt;</code>，你就知道它是啥行为</li><li>而不是根据类型“猜测”你想干啥（避免不确定行为）</li></ul><ol start="3"><li>类型推断可能不明确</li></ol><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">auto</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> foo</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">x </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">&gt;&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此时你可能都不知道 x 的类型是 int、unsigned int 还是 char，那语言怎么判断你到底是想做逻辑右移还是算术右移？强制明确操作反而更安全。</p><p>这里针对3，其实Java这种强类型语言是知道类型的，为什么不设计1个右移符号呢？<br> Java 的设计哲学是：语义明确、行为可预期、绝不“猜你的意图”，也就是回到第2点上<br> “强类型 ≠ 自动猜测操作行为”<br> “强类型 + 显式操作 = 安全 + 可维护性 + 无歧义”<br> 所以Java中是没有无符号整数的，所有整数类型（int, long）都被视为有符号类型</p></div><h4 id="右移的常见操作" tabindex="-1">右移的常见操作 <a class="header-anchor" href="#右移的常见操作" aria-label="Permalink to &quot;右移的常见操作&quot;">​</a></h4><h5 id="除以2的幂次" tabindex="-1">除以2的幂次 <a class="header-anchor" href="#除以2的幂次" aria-label="Permalink to &quot;除以2的幂次&quot;">​</a></h5><p><a href="#">如上</a></p><h5 id="提取整数x的i位二进制" tabindex="-1">提取整数x的i位二进制 <a class="header-anchor" href="#提取整数x的i位二进制" aria-label="Permalink to &quot;提取整数x的i位二进制&quot;">​</a></h5><p>⚠️这里的i从0开始 <code>(x &gt;&gt; i) &amp; 1</code> 可以配合数据的长度遍历每一位</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> BinaryBitTraversal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">[]</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 19</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> bitLength</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> Integer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">toBinaryString</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">x</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">).</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">length</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> i </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> bitLength</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">++)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">            int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> bit</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">x </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">&gt;&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> &amp;</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">            System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">printf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">第 %d 位: %d</span><span style="--shiki-light:#56B6C2;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> bit</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="提取整数x的多位二进制-从i到j" tabindex="-1">提取整数x的多位二进制（从i到j） <a class="header-anchor" href="#提取整数x的多位二进制-从i到j" aria-label="Permalink to &quot;提取整数x的多位二进制（从i到j）&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> BinaryBitExtraction</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">[]</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0b110101</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 二进制数 110101，十进制为 53</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> j</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">        // 右移 i 位</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> shifted</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">&gt;&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">        // 创建掩码</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> mask</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> &lt;&lt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">j </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">-</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> i </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">))</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> -</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">        // 按位与操作</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> result</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> shifted </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">&amp;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> mask</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">        System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">Integer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">toBinaryString</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">result</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">));</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 输出10，提取出第 1 到第 3 位</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,10))])}const c=l(p,[["render",e]]);export{A as __pageData,c as default};
