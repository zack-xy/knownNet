import{_ as n}from"./chunks/theme.D2WgP2bZ.js";import{_ as p,c as t,o as r,aG as e,G as l}from"./chunks/framework.DsljODgs.js";const A=JSON.parse('{"title":"位运算 - 异或运算规则","description":"","frontmatter":{"title":"位运算 - 异或运算规则","author":"Zack Zheng","date":"2025/05/08 09:28","categories":["何以编程"],"tags":["算法"]},"headers":[],"relativePath":"others/feature/算法特性/异或运算规则.md","filePath":"others/feature/算法特性/异或运算规则.md","lastUpdated":1748315692000}'),o={name:"others/feature/算法特性/异或运算规则.md"};function i(c,a,b,d,_,m){const s=n;return r(),t("div",null,[a[0]||(a[0]=e(`<h5 id="异或运算规则" tabindex="-1">异或运算规则 <a class="header-anchor" href="#异或运算规则" aria-label="Permalink to &quot;异或运算规则&quot;">​</a></h5><p>异或的规则简单来说就是相同为0，不同为1(a)</p><p>在常规的编程中，异或运算<code>^</code>主要用于整数类型的数据,或者布尔类型（两个操作数相同为false，不同为true）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>0^0=0;</span></span>
<span class="line"><span>0^a=a;</span></span>
<span class="line"><span>a^a=0;</span></span>
<span class="line"><span>a^b^a=b;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>上面的不同指的是，<span class="red">一个为0，另一个不为0</span>，如果两个是不同的不为0的数字呢？</p><p>两个不相同的数字就是二进制按位异或运算了</p></div><h5 id="异或操作的性质" tabindex="-1">异或操作的性质 <a class="header-anchor" href="#异或操作的性质" aria-label="Permalink to &quot;异或操作的性质&quot;">​</a></h5><ul><li><b>恒等性：</b>任何数与0异或，结果是其本身：例如<code>n^0=n</code></li><li><b>自反性：</b>任何数与自身异或，结果是0：例如<code>n^n=0</code></li><li>异或操作满足交换律和结合律：即<code>a^b=b^a，(a^b)^c=a^(b^c)</code></li></ul>`,7)),l(s,{src:"https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/按位异或.png"}),a[1]||(a[1]=e('<p>根据上述规则，来看一下为什么上面的示例中可以交换变量</p><p>假设初始值：</p><p>a = A<br> b = B</p><p>‌第一步：a ^= b（即 a = a ^ b） ‌ a 的新值：A ^ B<br> b 仍为 B</p><p>‌第二步：b ^= a（即 b = b ^ a）‌<br> 此时 a = A ^ B，代入计算：<br> b = B ^ (A ^ B)<br> 根据交换律：B ^ B ^ A = 0 ^ A = A<br> ‌结果‌：b 被赋值为 A（原 a 的值）</p><p>‌第三步：a ^= b（即 a = a ^ b）‌<br> 此时：<br> a = A ^ B（第一步结果）<br> b = A（第二步结果）<br> 计算：a = (A ^ B) ^ A = B ^ (A ^ A) = B ^ 0 = B<br> ‌结果‌：a 被赋值为 B（原 b 的值）</p><p><a href="./../../../books/techAndCodes/大话计算机/门电路.html">相关门电路异或</a></p>',7))])}const f=p(o,[["render",i]]);export{A as __pageData,f as default};
