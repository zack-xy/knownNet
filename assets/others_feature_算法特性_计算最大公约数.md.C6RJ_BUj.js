import{_ as i,c as a,o as t,aG as n}from"./chunks/framework.CdnsPyyz.js";const y=JSON.parse('{"title":"计算最大公约数","description":"","frontmatter":{"title":"计算最大公约数","author":"Zack Zheng","date":"2025/04/30 14:03","categories":["何以编程"],"tags":["算法"]},"headers":[],"relativePath":"others/feature/算法特性/计算最大公约数.md","filePath":"others/feature/算法特性/计算最大公约数.md","lastUpdated":1745993569000}'),e={name:"others/feature/算法特性/计算最大公约数.md"};function h(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> gcd</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> y</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> y </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> ?</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> gcd</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">y</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">%</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> y</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> :</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>gcd实现的是欧几里得算法（辗转相除法） 基于一个重要的数学性质：两个整数 x 和 y（假设 x &gt;= y）的最大公约数等于 y 和 x % y（即 x 除以 y 的余数）的最大公约数。用数学公式表示就是： <code>gcd(x,y)=gcd(y,x mod y)</code></p>`,2)]))}const g=i(e,[["render",h]]);export{y as __pageData,g as default};
