import{_ as a,c as o,o as t,aG as r}from"./chunks/framework.DGtm8y85.js";const _=JSON.parse('{"title":"逆波兰式","description":"","frontmatter":{"title":"逆波兰式","author":"Zack Zheng","date":"2025/05/12 13:59","categories":["何以编程"],"tags":["算法","栈","逆波兰式"]},"headers":[],"relativePath":"others/feature/算法特性/逆波兰式.md","filePath":"others/feature/算法特性/逆波兰式.md","lastUpdated":1747032477000}'),c={name:"others/feature/算法特性/逆波兰式.md"};function d(i,e,l,n,h,s){return t(),o("div",null,e[0]||(e[0]=[r('<h5 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h5><p>逆波兰式也叫后缀表达式(运算符写在操作数之后)</p><h5 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h5><p>一个表达式E的后缀形式可以如下定义：</p><ol><li>如果E是一个变量或者常量，E的后缀式是E本身</li><li>如果E是<code>E1 op E2</code>形式的表达式，这里op是任何二元操作符，则E的后缀式为<code>E1&#39;E2&#39;op</code>，这里<code>E1&#39;</code>和<code>E2&#39;</code>分别为E1和E2的后缀式</li><li>如果E是(E1)形式的表达式，则E1的后缀式就是E的后缀式</li></ol><h5 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-label="Permalink to &quot;举个例子&quot;">​</a></h5><p><code>a+b</code>(中缀表达式) ====&gt; <code>ab+</code>(后缀表达式)</p><p><code>(a+b)*c-(a+b)/e</code>(中缀表达式)</p><p>====&gt; <code>((a+b)*c)((a+b)/e)-</code> ====&gt; <code>((a+b)c*)((a+b)e/)-</code> ====&gt; <code>(ab+c*)(ab+e/)-</code> ====&gt; <code>ab+c*ab+e/-</code></p><h5 id="为什么要搞一个逆波兰式" tabindex="-1">为什么要搞一个逆波兰式 <a class="header-anchor" href="#为什么要搞一个逆波兰式" aria-label="Permalink to &quot;为什么要搞一个逆波兰式&quot;">​</a></h5><p>因为计算机不好理解中缀表达式，逆波兰式在计算机看来是比较简单易懂的结构，因为计算机普遍采用的内存结构是栈式结构，执行先进后出的顺序。</p><h5 id="计算方法" tabindex="-1">计算方法 <a class="header-anchor" href="#计算方法" aria-label="Permalink to &quot;计算方法&quot;">​</a></h5><p>新建一个表达式，如果当前字符为变量或者为数字，则压栈，如果是运算符，则将栈顶两个元素弹出作为相应运算，结果再入栈，最后当表达式扫描完后，栈里的就是结果。</p><h5 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h5><p>逆波兰表达式的长度为n，n是奇数时，其中包含的数字最多有(n+1)/2个 包含的字符最多有(n-1)/2个，当n为偶数时，不能构成合法的逆波兰表达式。</p>',15)]))}const b=a(c,[["render",d]]);export{_ as __pageData,b as default};
