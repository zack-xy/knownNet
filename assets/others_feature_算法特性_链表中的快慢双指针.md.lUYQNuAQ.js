import{_ as i,c as a,o as n,aG as l}from"./chunks/framework.CdnsPyyz.js";const D=JSON.parse('{"title":"链表中的快慢双指针","description":"","frontmatter":{"title":"链表中的快慢双指针","author":"Zack Zheng","date":"2025/04/22 13:58","categories":["何以编程"],"tags":["算法","链表"]},"headers":[],"relativePath":"others/feature/算法特性/链表中的快慢双指针.md","filePath":"others/feature/算法特性/链表中的快慢双指针.md","lastUpdated":1745377090000}'),h={name:"others/feature/算法特性/链表中的快慢双指针.md"};function t(p,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h6 id="链表中的快慢双指针-用来找链表的中间节点。" tabindex="-1">链表中的快慢双指针，用来找链表的中间节点。 <a class="header-anchor" href="#链表中的快慢双指针-用来找链表的中间节点。" aria-label="Permalink to &quot;链表中的快慢双指针，用来找链表的中间节点。&quot;">​</a></h6><p>这里分为2种情况：</p><ul><li>1是链表节点数量是奇数个，中间节点正好把链表分为前后两半</li><li>2是链表节点数量是偶数个，中间节点的定义可以是中间两个的前一个或者后一个</li></ul><p>如果链表节点是奇数个，或者偶数个，要求中间的前一个节点，代码就是一般的情况</p><p>可以这么记：<code>fast跳2步，所以判断fast的next不为空且fast的next的next不为空</code></p><div class="language-Java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;"> ListNode</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> getMidNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">  ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> fast </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">  ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> slow </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  while</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">fast</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> !=</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> &amp;&amp;</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> fast</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> !=</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    fast </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> fast</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    slow </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> slow</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> slow</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果想要偶数个节点的中间第二个，需要修改一下while循环的条件</p><div class="language-Java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;"> ListNode</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> getMidNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">  ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> fast </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">  ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> slow </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  while</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">fast </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> &amp;&amp;</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> fast</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> !=</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    fast </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> fast</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    slow </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> slow</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> slow</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">为什么会有这个区别？</p><p>为什么奇数个节点，无论哪一种，都正好在中间呢？</p><p>是因为指针移动之前就已经在头节点了，假设指针是快指针，移动两步，就到第3个节点了。（两种区别只是判断的条件不一样，都是移动2个位置）</p><p>所以一个奇数个节点的链表，排除头节点，正好要移动2的整数倍步数 而偶数个节点的链表，排除头节点，剩下奇数步数，可能没移动到结尾</p><p>如果没移动到结尾（慢指针在中间2个节点的第1个） 如果移动到结尾（慢指针在中间2个节点的第2个）</p></div><h6 id="快慢指针用来找倒数第n个节点" tabindex="-1">快慢指针用来找倒数第N个节点 <a class="header-anchor" href="#快慢指针用来找倒数第n个节点" aria-label="Permalink to &quot;快慢指针用来找倒数第N个节点&quot;">​</a></h6><p>快指针先走N步，慢指针和快指针同时走，快指针到头(null)，慢指针在倒数N的位置</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>⚠️注意这里</p><p>这里先走N步，需要理解为是节点的间隔N</p><p>快指针到头，其实是走到null节点，跟null节点间隔N的，是倒数第N个节点 （ 所以慢指针在倒数第N的位置 但是删除这个节点，需要找到N-1的位置 所以这里涉及一个技巧，fast是从head开始走，slow从虚拟头节点开始走 ）</p></div><h6 id="快慢指针用来找第一个共同节点-差和双指针" tabindex="-1">快慢指针用来找第一个共同节点（差和双指针） <a class="header-anchor" href="#快慢指针用来找第一个共同节点-差和双指针" aria-label="Permalink to &quot;快慢指针用来找第一个共同节点（差和双指针）&quot;">​</a></h6><p>较长链表长度为l1,较短链表长度为l2,差值为d = l1 - l2 快指针先走d步，而后快慢同时走，节点相同的就是第一个共同节点</p>`,14)]))}const F=i(h,[["render",t]]);export{D as __pageData,F as default};
