import{_ as i,c as a,o as n,aG as p}from"./chunks/framework.CdnsPyyz.js";const B=JSON.parse('{"title":"链表的反转操作","description":"","frontmatter":{"title":"链表的反转操作","author":"Zack Zheng","date":"2025/04/22 14:28","categories":["何以编程"],"tags":["算法","链表"]},"headers":[],"relativePath":"others/feature/算法特性/链表的反转操作.md","filePath":"others/feature/算法特性/链表的反转操作.md","lastUpdated":1745371364000}'),l={name:"others/feature/算法特性/链表的反转操作.md"};function e(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[p(`<p>链表的反转操作是基本的链表操作之一。</p><p>快速记忆：</p><p>需要一个反转后的链表指针prev（用来返回最后的反转链表）<br> 需要一个当前的链表指针curr</p><p>循环当前的链表curr，直到循环到终点</p><p>需要一个临时的指针，存储当前节点curr的下一个节点temp 将当前的节点的next指针指向prev prev指向curr curr指向temp</p><div class="language-Java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;"> ListNode</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> reverseList</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">  ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> curr </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">  ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> prev </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  while</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">curr </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">    ListNode</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> temp </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> curr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">    curr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> prev</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    prev </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> curr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    curr </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> temp</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> prev</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="info custom-block"><p class="custom-block-title">为什么要上面这些步骤？</p><p>因为反转链表会调整next指针的方向，所以需要一个额外的prev存储反转后的链表</p><ul><li><p>为什么要一个临时的temp？<br> 因为curr的next指针调整之后，curr就丢失了信息，找不到下一个节点了，所以要存一下</p></li><li><p>为什么要prev指向curr</p></li></ul><p>因为原链表和反转后的链表，要一个一个节点的处理，所以要调整指针的移动</p></div>`,7)]))}const c=i(l,[["render",e]]);export{B as __pageData,c as default};
