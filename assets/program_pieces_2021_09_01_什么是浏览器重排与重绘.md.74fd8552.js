import{_ as e,c as a,o as r,a as i}from"./app.1cee448a.js";const u=JSON.parse('{"title":"什么是浏览器重排与重绘","description":"","frontmatter":{"title":"什么是浏览器重排与重绘","author":"Zack Zheng","date":"2021/09/01 09:51","categories":["大海拾遗"],"tags":["Chrome"]},"headers":[{"level":2,"title":"渲染机制","slug":"渲染机制","link":"#渲染机制","children":[]}],"relativePath":"program/pieces/2021/09/01/什么是浏览器重排与重绘.md","lastUpdated":1684224278000}'),t={name:"program/pieces/2021/09/01/什么是浏览器重排与重绘.md"},h=i('<h2 id="渲染机制" tabindex="-1">渲染机制 <a class="header-anchor" href="#渲染机制" aria-hidden="true">#</a></h2><h4 id="什么是doctype及作用" tabindex="-1">什么是DOCTYPE及作用 <a class="header-anchor" href="#什么是doctype及作用" aria-hidden="true">#</a></h4><p>DTD(document type definition,文档类型定义)是一系列的语法规则， 用来定义XML或(X)HTML的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式 DOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途便是文件的合法性验证。 如果文件代码不合法，name浏览器解析时便会出错</p><p>常见的DOCTYPE HTML5</p><p>HTML 4.01 Strict (严格模式，不包括暂时性和弃用的元素)</p><p>HTML 4.01 Transitional （传统模式）</p><h4 id="浏览器渲染过程" tabindex="-1">浏览器渲染过程 <a class="header-anchor" href="#浏览器渲染过程" aria-hidden="true">#</a></h4><h4 id="重排reflow" tabindex="-1">重排Reflow <a class="header-anchor" href="#重排reflow" aria-hidden="true">#</a></h4><p>定义：DOM结构中的各个元素都有自己的盒子(模型)，这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow 触发：</p><ul><li>增加、删除、修改DOM节点时，会导致Reflow或Repaint</li><li>移动DOM的位置，或是动画</li><li>修改CSS样式</li><li>Resize窗口的时候(移动端没有)，或者是滚动的时候</li><li>修改网页的默认字体时</li></ul><h4 id="重绘repaint" tabindex="-1">重绘Repaint <a class="header-anchor" href="#重绘repaint" aria-hidden="true">#</a></h4><p>定义：当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照 各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为Repaint 触发：DOM改动、CSS改动 如何减少：多次节点操作一次性完成</p><h4 id="布局layout" tabindex="-1">布局Layout <a class="header-anchor" href="#布局layout" aria-hidden="true">#</a></h4><h4 id="提升页面性能" tabindex="-1">提升页面性能 <a class="header-anchor" href="#提升页面性能" aria-hidden="true">#</a></h4><ol><li>资源压缩合并，减少HTTP请求</li><li>非核心代码异步加载- 异步加载的方式 - 异步加载的区别</li><li>利用浏览器缓存 - 缓存的分类 - 缓存的原理</li><li>使用CDN</li><li>预解析DNS</li></ol><meta http-equiv="x-dns-prefetch-control" content="on"><link rel="dns-prefetch" href="//host_name_to_prefetch.com"><h4 id="错误监控" tabindex="-1">错误监控 <a class="header-anchor" href="#错误监控" aria-hidden="true">#</a></h4><h4 id="前端错误的分类" tabindex="-1">前端错误的分类 <a class="header-anchor" href="#前端错误的分类" aria-hidden="true">#</a></h4><p>即时运行错误：代码错误、资源加载错误</p><h4 id="错误的捕获方式" tabindex="-1">错误的捕获方式 <a class="header-anchor" href="#错误的捕获方式" aria-hidden="true">#</a></h4><p>即时运行错误的捕获方式： 1.try...catch 2.window.onerror 资源加载错误 1.object.onerror 2.performance.getEntries() 3.Error事件捕获</p><h4 id="跨域js捕获错误" tabindex="-1">跨域js捕获错误 <a class="header-anchor" href="#跨域js捕获错误" aria-hidden="true">#</a></h4><ol><li>在script标签增加crossorigin属性</li><li>设置js资源响应头Access-Control-Allow-Aorgin:*</li></ol><h4 id="上报错误" tabindex="-1">上报错误 <a class="header-anchor" href="#上报错误" aria-hidden="true">#</a></h4><ol><li>采用Ajax通信的方式上报</li><li>利用Image对象上报 (new Image()).src = &#39;<a href="http://baidu.com/testjk?r=sdsa" target="_blank" rel="noreferrer">http://baidu.com/testjk?r=sdsa</a>&#39;</li></ol>',26),d=[h];function n(o,l,s,c,p,_){return r(),a("div",null,d)}const m=e(t,[["render",n]]);export{u as __pageData,m as default};
