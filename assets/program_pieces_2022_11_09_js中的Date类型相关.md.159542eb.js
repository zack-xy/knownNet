import{_ as a,c as e,o as s,a as n}from"./app.8d9155ae.js";const D=JSON.parse('{"title":"js中的Date类型相关","description":"","frontmatter":{"title":"js中的Date类型相关","author":"Zack Zheng","date":"2022/11/09 09:51","categories":["大海拾遗"],"tags":["JavaScript"]},"headers":[{"level":3,"title":"常见引用类型","slug":"常见引用类型","link":"#常见引用类型","children":[]}],"relativePath":"program/pieces/2022/11/09/js中的Date类型相关.md","lastUpdated":1676537933000}'),t={name:"program/pieces/2022/11/09/js中的Date类型相关.md"},l=n(`<h3 id="常见引用类型" tabindex="-1">常见引用类型 <a class="header-anchor" href="#常见引用类型" aria-hidden="true">#</a></h3><h4 id="date" tabindex="-1">Date <a class="header-anchor" href="#date" aria-hidden="true">#</a></h4><p>常见方法： 1.Date.parse()方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数 参数：月/日/年”，如&quot;5/23/2019&quot;、月名日, 年”，如&quot;May 23, 2019&quot;、周几月名日年时:分:秒时区”，如&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;； 2.Date.UTC()方法也返回日期的毫秒表示 参数：年、零起点月数（1月是0，2月是1，以此类推）、日（1~31）、时（0~23）、分、秒和毫秒。这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为1日。 3.Date.now()方法，返回表示方法执行时日期和时间的毫秒数 4.new Date().toLocaleString() // &quot;2021/10/20 下午5:05:13&quot; 1⃣️ 5.new Date().toString() // &quot;Wed Oct 20 2021 17:06:17 GMT+0800 (中国标准时间)&quot; 1⃣️ 6.new Date().valueOf() // 返回日期的毫秒表示 可用于确保日期先后的一个简单方式(无法判等???)</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">let date1 = new Date(2019, 0, 1);    // 2019年1月1日</span></span>
<span class="line"><span style="color:#A6ACCD;">let date2 = new Date(2019, 1, 1);    // 2019年2月1日</span></span>
<span class="line"><span style="color:#A6ACCD;">let date3 = new Date(date1.getTime()) </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(date1 &lt; date2); // true </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(date1 &gt; date2); // false </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(date1 == date3); // false </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(date1 == date3); // false </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(date1.valueOf() == date3.valueOf()) // true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#abb2bf;">let date1 = new Date(2019, 0, 1);    // 2019年1月1日</span></span>
<span class="line"><span style="color:#abb2bf;">let date2 = new Date(2019, 1, 1);    // 2019年2月1日</span></span>
<span class="line"><span style="color:#abb2bf;">let date3 = new Date(date1.getTime()) </span></span>
<span class="line"><span style="color:#abb2bf;">console.log(date1 &lt; date2); // true </span></span>
<span class="line"><span style="color:#abb2bf;">console.log(date1 &gt; date2); // false </span></span>
<span class="line"><span style="color:#abb2bf;">console.log(date1 == date3); // false </span></span>
<span class="line"><span style="color:#abb2bf;">console.log(date1 == date3); // false </span></span>
<span class="line"><span style="color:#abb2bf;">console.log(date1.valueOf() == date3.valueOf()) // true</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>7.new Date().toDateString() // &quot;Wed Oct 20 2021&quot; 1⃣️ 8.new Date().toTimeString() // &quot;17:18:12 GMT+0800 (中国标准时间)&quot; 1⃣️ 9.new Date().toLocaleDateString() // &quot;2021/10/20&quot; 1⃣️ 10.new Date().toLocaleTimeString() // &quot;下午5:19:58&quot; 1⃣️ 11.new Date().toUTCString() // &quot;Wed, 20 Oct 2021 09:20:32 GMT&quot; 1⃣️ 1⃣️：因浏览器而异。因此不能用于在用户界面上一致地显示日期</p><h4 id="regexp" tabindex="-1">RegExp <a class="header-anchor" href="#regexp" aria-hidden="true">#</a></h4><p>匹配模式的标记 g：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。 i：不区分大小写，表示在查找匹配时忽略pattern和字符串的大小写。 m：多行模式，表示查找到一行文本末尾时会继续查找。 y：粘附模式，表示只查找从lastIndex开始及之后的字符串。 u：Unicode模式，启用Unicode匹配。 s：dotAll模式，表示元字符.匹配任何字符（包括\\n或\\r） RegExp实例是有属性的</p>`,7),o=[l];function p(c,r,i,d,u,b){return s(),e("div",null,o)}const _=a(t,[["render",p]]);export{D as __pageData,_ as default};
