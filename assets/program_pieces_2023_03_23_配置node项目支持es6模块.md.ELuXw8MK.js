import{_ as a,c as s,o,ax as n}from"./chunks/framework.DtvkEc4l.js";const h=JSON.parse('{"title":"配置node项目支持es6模块","description":"","frontmatter":{"title":"配置node项目支持es6模块","author":"Zack Zheng","date":"2023/03/23 15:59","categories":["大海拾遗"],"tags":["Node"]},"headers":[],"relativePath":"program/pieces/2023/03/23/配置node项目支持es6模块.md","filePath":"program/pieces/2023/03/23/配置node项目支持es6模块.md","lastUpdated":1679538949000}'),t={name:"program/pieces/2023/03/23/配置node项目支持es6模块.md"};function r(l,e,i,c,d,p){return o(),s("div",null,e[0]||(e[0]=[n(`<h3 id="_1-es6模块转commonjs模块" tabindex="-1">1. es6模块转commonjs模块 <a class="header-anchor" href="#_1-es6模块转commonjs模块" aria-label="Permalink to &quot;1. es6模块转commonjs模块&quot;">​</a></h3><h4 id="_1-1-安装依赖" tabindex="-1">1.1. 安装依赖 <a class="header-anchor" href="#_1-1-安装依赖" aria-label="Permalink to &quot;1.1. 安装依赖&quot;">​</a></h4><p>全局安装 <code>npm install babel-cli browserify -g</code> 项目安装 <code>npm install babel-preset-es2015 --save-dev</code></p><h4 id="_1-2-项目根目录新建文件-babelrc" tabindex="-1">1.2. 项目根目录新建文件.babelrc <a class="header-anchor" href="#_1-2-项目根目录新建文件-babelrc" aria-label="Permalink to &quot;1.2. 项目根目录新建文件.babelrc&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>    {</span></span>
<span class="line"><span>        &quot;presets&quot;: [&quot;es2015&quot;]</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-3-转换目标文件为commonjs模块-转换src文件夹内文件到lib文件夹" tabindex="-1">1.3. 转换目标文件为commonjs模块(转换src文件夹内文件到lib文件夹) <a class="header-anchor" href="#_1-3-转换目标文件为commonjs模块-转换src文件夹内文件到lib文件夹" aria-label="Permalink to &quot;1.3. 转换目标文件为commonjs模块(转换src文件夹内文件到lib文件夹)&quot;">​</a></h4><p><code>babel src -d lib</code></p><h3 id="_2-将commonjs模块转为浏览器可以执行的格式" tabindex="-1">2. 将commonjs模块转为浏览器可以执行的格式 <a class="header-anchor" href="#_2-将commonjs模块转为浏览器可以执行的格式" aria-label="Permalink to &quot;2. 将commonjs模块转为浏览器可以执行的格式&quot;">​</a></h3><p>(转换main.js为compiled.js可在浏览器执行) browserify main.js &gt; compiled.js</p><h3 id="_3-二者区分和相互加载" tabindex="-1">3. 二者区分和相互加载 <a class="header-anchor" href="#_3-二者区分和相互加载" aria-label="Permalink to &quot;3. 二者区分和相互加载&quot;">​</a></h3><p><a href="http://www.ruanyifeng.com/blog/2020/08/how-nodejs-use-es6-module.html" target="_blank" rel="noreferrer">http://www.ruanyifeng.com/blog/2020/08/how-nodejs-use-es6-module.html</a></p><p>配置项目支持es6模块 node v13.2.0之前 在package.json中添加属性：&quot;type&quot;: &quot;module&quot; 在执行命令中添加如下选项：node --experimental-modules src/index.js</p><p>node v13.2.0之后 只需要在package.json中添加属性：&quot;type&quot;: &quot;module&quot;</p>`,13)]))}const u=a(t,[["render",r]]);export{h as __pageData,u as default};
