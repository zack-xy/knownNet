import{_ as e,c as a,o as r,a as t}from"./app.f9a43734.js";const f=JSON.parse('{"title":"为什么需要原码反码和补码","description":"","frontmatter":{"title":"为什么需要原码反码和补码","author":"Zack Zheng","date":"2023/08/10 00:00","categories":["计算机基础"],"tags":["计算机基础","读书笔记"]},"headers":[],"relativePath":"program/pieces/2023/08/10/为什么需要原码反码和补码.md","lastUpdated":1691673798000}'),_={name:"program/pieces/2023/08/10/为什么需要原码反码和补码.md"},p=t('<p>原码：最高位0表示正数，1表示负数 反码：正数与原码相同，负数除符号位取反 补码：正数与原码相同，负数在反码上加1</p><h4 id="为什么需要反码" tabindex="-1">为什么需要反码？ <a class="header-anchor" href="#为什么需要反码" aria-hidden="true">#</a></h4><p>因为计算负数和正数相加，直接使用原码二进制相加，结果是错的</p><p>比如说：</p><p>1+（-2）<br> = 0000 0001 + 1000 0010<br> = 1000 0011<br> = -3</p><p>使用反码相加就是对的了</p><p>1+（-2） = 0000 0001 + 1000 0010 （原码） = 0000 0001 + 1111 1101 （反码） = 1111 1110 （反码） = 1000 0001 (原码) = -1</p><p>运算问题解决了，但是还存在歧义问题 就是+0和-0 +0 = 0000 0000 -0 = 1000 0000</p><h4 id="为什么需要补码" tabindex="-1">为什么需要补码 <a class="header-anchor" href="#为什么需要补码" aria-hidden="true">#</a></h4><p>解决0的歧义，因为无论正负0，转换完之后，补码都是0000 0000</p><p>最终数字是以【补码】的形式存在计算机中的，并以补码的形式进行二进制计算</p><h4 id="补码如何转换为原码" tabindex="-1">补码如何转换为原码 <a class="header-anchor" href="#补码如何转换为原码" aria-hidden="true">#</a></h4><p>最高位0表示正数，1表示负数 如果是正数，补码就是原码 如果是负数，除符号位全部取反，之后加1</p><p>1 +（-2）<br> = 0000 0001 + 1000 0010 （原码）<br> = 0000 0001 + 1111 1101 （反码）<br> = 0000 0001 + 1111 1110 （补码）<br> = 1111 1111 （补码）<br> = 1000 0001 （原码）<br> = -1</p>',14),s=[p];function d(c,o,i,n,h,l){return r(),a("div",null,s)}const m=e(_,[["render",d]]);export{f as __pageData,m as default};
