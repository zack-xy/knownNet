import{_ as a,c as e,o as r,aG as o}from"./chunks/framework.Bwfhi3i_.js";const m=JSON.parse('{"title":"sort比较函数记录","description":"","frontmatter":{"title":"sort比较函数记录","author":"Zack Zheng","date":"2023/04/24 16:45","categories":["大海拾遗"],"tags":["JavaScript"]},"headers":[],"relativePath":"program/pieces/sort比较函数记录.md","filePath":"program/pieces/sort比较函数记录.md","lastUpdated":1741325738000}'),i={name:"program/pieces/sort比较函数记录.md"};function l(s,t,n,c,_,p){return r(),e("div",null,[...t[0]||(t[0]=[o('<ul><li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；（升序）</li><li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。</li><li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。(降序)</li></ul><h4 id="sort底层实现" tabindex="-1">sort底层实现： <a class="header-anchor" href="#sort底层实现" aria-label="Permalink to &quot;sort底层实现：&quot;">​</a></h4><ol><li>当n&lt;10,采用插入排序</li><li>当n&gt;10,采用三路快速排序</li><li>10&lt;n&lt;100,采用中位数作为哨兵元素</li><li>n&gt;1000,每隔200～215个元素挑出一个元素放到新数组中，然后对它排序，找到中间的数，以此作为中位数</li></ol>',3)])])}const u=a(i,[["render",l]]);export{m as __pageData,u as default};
