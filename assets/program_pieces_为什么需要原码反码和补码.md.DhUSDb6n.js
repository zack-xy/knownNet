import{_ as o}from"./chunks/theme.DS8fQ_l5.js";import{_ as p,c as s,o as i,aG as c,G as l,j as e,a as r}from"./chunks/framework.DGtm8y85.js";const k=JSON.parse('{"title":"为什么需要原码反码和补码","description":"","frontmatter":{"title":"为什么需要原码反码和补码","author":"Zack Zheng","date":"2023/08/10 00:00","categories":["计算机基础"],"tags":["计算机基础","读书笔记"]},"headers":[],"relativePath":"program/pieces/为什么需要原码反码和补码.md","filePath":"program/pieces/为什么需要原码反码和补码.md","lastUpdated":1748230005000}'),n={name:"program/pieces/为什么需要原码反码和补码.md"};function _(b,a,d,m,h,u){const t=o;return i(),s("div",null,[a[0]||(a[0]=c('<p>原码：最高位0表示正数，1表示负数<br> 反码：正数与原码相同，负数除符号位取反<br> 补码：正数与原码相同，负数在反码上加1</p><h4 id="为什么需要反码" tabindex="-1">为什么需要反码？ <a class="header-anchor" href="#为什么需要反码" aria-label="Permalink to &quot;为什么需要反码？&quot;">​</a></h4><p>因为计算负数和正数相加，直接使用原码二进制相加，结果是错的</p><p>比如说：</p><p>1+（-2）<br> = 0000 0001 + 1000 0010<br> = 1000 0011<br> = -3</p><p>使用反码相加就是对的了</p><p>1+（-2）<br> = 0000 0001 + 1000 0010 （原码）<br> = 0000 0001 + 1111 1101 （反码）<br> = 1111 1110 （反码）<br> = 1000 0001 (原码)<br> = -1</p><p>运算问题解决了，但是还存在歧义问题<br> 就是+0和-0<br> +0 = 0000 0000<br> -0 = 1000 0000</p><h4 id="为什么需要补码" tabindex="-1">为什么需要补码 <a class="header-anchor" href="#为什么需要补码" aria-label="Permalink to &quot;为什么需要补码&quot;">​</a></h4><p>解决0的歧义，因为无论正负0，转换完之后，补码都是0000 0000</p><div class="info custom-block"><p class="custom-block-title">为什么-0补码是0000 0000</p><p>-0的原码是1000 0000<br> -0的反码是1111 1111（符号位不变，数值位取反）<br> -0的补码是1111 1111 + 0000 0001 = 0000 0000（符号位不变，数值位取反+1）<br> 多余的进位会被丢弃，所以补码是0000 0000</p></div><p>最终数字是以【补码】的形式存在计算机中的，并以补码的形式进行二进制计算</p><h4 id="补码如何转换为原码" tabindex="-1">补码如何转换为原码 <a class="header-anchor" href="#补码如何转换为原码" aria-label="Permalink to &quot;补码如何转换为原码&quot;">​</a></h4><p>最高位0表示正数，1表示负数<br> 如果是正数，补码就是原码<br> 如果是负数，除符号位全部取反，之后加1</p><p>1 +（-2）<br> = 0000 0001 + 1000 0010 （原码）<br> = 0000 0001 + 1111 1101 （反码）<br> = 0000 0001 + 1111 1110 （补码）<br> = 1111 1111 （补码）<br> = 1000 0001 （原码）<br> = -1</p><h4 id="_4位补码映射关系" tabindex="-1">4位补码映射关系 <a class="header-anchor" href="#_4位补码映射关系" aria-label="Permalink to &quot;4位补码映射关系&quot;">​</a></h4>',16)),l(t,{src:"https://gitee.com/zackzhengxy/picGallery/raw/main/imgs/4位补码映射关系.png"}),a[1]||(a[1]=e("div",{class:"danger custom-block"},[e("p",{class:"custom-block-title"},"注意"),e("p",null,[r("注意上图中，最高位是符号位，0表示正数，1表示负数。"),e("br"),r(" 符号位也参与表示数据，并不是额外的一位用来表示符号（我之前就搞错了）")])],-1))])}const x=p(n,[["render",_]]);export{k as __pageData,x as default};
