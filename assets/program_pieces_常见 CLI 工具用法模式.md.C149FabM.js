import{_ as s,c as a,o as n,aG as l}from"./chunks/framework.DsljODgs.js";const k=JSON.parse('{"title":"常见CLI工具用法模式","description":"","frontmatter":{"title":"常见CLI工具用法模式","author":"Zack Zheng","date":"2025/07/18 10:38","categories":["npm"],"tags":["npm","node"]},"headers":[],"relativePath":"program/pieces/常见 CLI 工具用法模式.md","filePath":"program/pieces/常见 CLI 工具用法模式.md","lastUpdated":1753084976000}'),e={name:"program/pieces/常见 CLI 工具用法模式.md"};function t(c,i,h,r,p,o){return n(),a("div",null,[...i[0]||(i[0]=[l('<h5 id="参数选项式-mycli-name-zack-env-prod" tabindex="-1">参数选项式：<code>mycli --name zack --env prod</code> <a class="header-anchor" href="#参数选项式-mycli-name-zack-env-prod" aria-label="Permalink to &quot;参数选项式：`mycli --name zack --env prod`&quot;">​</a></h5><h6 id="在cli开发中如何获取" tabindex="-1">在cli开发中如何获取？ <a class="header-anchor" href="#在cli开发中如何获取" aria-label="Permalink to &quot;在cli开发中如何获取？&quot;">​</a></h6><ul><li>原生方式(<code>process.argv</code>)</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> process</span><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">node:process</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">process</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">argv</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 以这个 node cli.js hello --name=zack --age 18 cli命令为例</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">/* 输出</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">[</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  &#39;/usr/local/bin/node&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  &#39;/path/to/cli.js&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  &#39;hello&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  &#39;--name=zack&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  &#39;--age&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  &#39;18&#39;</span></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> args</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> process</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">argv</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">slice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>使用解析库commander</li></ul><p><a href="https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md" target="_blank" rel="noreferrer">commander.js</a></p><h5 id="子命令式-mycli-init、mycli-build、mycli-deploy" tabindex="-1">子命令式：<code>mycli init</code>、<code>mycli build</code>、<code>mycli deploy</code> <a class="header-anchor" href="#子命令式-mycli-init、mycli-build、mycli-deploy" aria-label="Permalink to &quot;子命令式：`mycli init`、`mycli build`、`mycli deploy`&quot;">​</a></h5><h5 id="管道式输入-stdin-echo-hello-mycli" tabindex="-1">管道式输入（stdin）：<code>echo &quot;hello&quot; | mycli</code> <a class="header-anchor" href="#管道式输入-stdin-echo-hello-mycli" aria-label="Permalink to &quot;管道式输入（stdin）：`echo &quot;hello&quot; | mycli`&quot;">​</a></h5><h5 id="交互式-prompt-mycli-启动后引导用户输入" tabindex="-1">交互式（prompt）：mycli 启动后引导用户输入 <a class="header-anchor" href="#交互式-prompt-mycli-启动后引导用户输入" aria-label="Permalink to &quot;交互式（prompt）：mycli 启动后引导用户输入&quot;">​</a></h5><p>比如说：<code>npx create-react-app</code></p><h5 id="文件参数式-mycli-config-json" tabindex="-1">文件参数式：<code>mycli ./config.json</code> <a class="header-anchor" href="#文件参数式-mycli-config-json" aria-label="Permalink to &quot;文件参数式：`mycli ./config.json`&quot;">​</a></h5><h5 id="多参数式-mycli-name1-name2-name3" tabindex="-1">多参数式：<code>mycli name1 name2 name3</code> <a class="header-anchor" href="#多参数式-mycli-name1-name2-name3" aria-label="Permalink to &quot;多参数式：`mycli name1 name2 name3`&quot;">​</a></h5><h5 id="环境变量控制-env-prod-mycli" tabindex="-1">环境变量控制：<code>ENV=prod mycli</code> <a class="header-anchor" href="#环境变量控制-env-prod-mycli" aria-label="Permalink to &quot;环境变量控制：`ENV=prod mycli`&quot;">​</a></h5><h5 id="组合式参数-mycli-font-standard-align-center" tabindex="-1">组合式参数：<code>mycli --font=Standard --align=center</code> <a class="header-anchor" href="#组合式参数-mycli-font-standard-align-center" aria-label="Permalink to &quot;组合式参数：`mycli --font=Standard --align=center`&quot;">​</a></h5><h5 id="调用系统命令-mycli-exec-ls-la" tabindex="-1">调用系统命令：<code>mycli exec &quot;ls -la&quot;</code> <a class="header-anchor" href="#调用系统命令-mycli-exec-ls-la" aria-label="Permalink to &quot;调用系统命令：`mycli exec &quot;ls -la&quot;`&quot;">​</a></h5><h5 id="配置文件式-zxyrc-zxy-config-js" tabindex="-1">配置文件式：<code>.zxyrc, zxy.config.js</code> <a class="header-anchor" href="#配置文件式-zxyrc-zxy-config-js" aria-label="Permalink to &quot;配置文件式：`.zxyrc, zxy.config.js`&quot;">​</a></h5>',16)])])}const m=s(e,[["render",t]]);export{k as __pageData,m as default};
