import{_ as a,c as p,o,aG as r}from"./chunks/framework.DsljODgs.js";const _=JSON.parse('{"title":"进制间的转换","description":"","frontmatter":{"title":"进制间的转换","author":"Zack Zheng","date":"2023/03/08 22:37","categories":["大海拾遗"],"tags":["进制转换"]},"headers":[],"relativePath":"program/pieces/进制间的转换.md","filePath":"program/pieces/进制间的转换.md","lastUpdated":1748312177000}'),t={name:"program/pieces/进制间的转换.md"};function l(i,e,d,c,s,n){return o(),p("div",null,[...e[0]||(e[0]=[r('<h3 id="进制区分" tabindex="-1">进制区分 <a class="header-anchor" href="#进制区分" aria-label="Permalink to &quot;进制区分&quot;">​</a></h3><p>在编程中，不同进制的表示通常通过前缀来区分</p><ul><li>二进制 <ul><li>前缀：<code>0b</code> 或 <code>0B</code></li><li>示例：<code>0b1010</code>（表示十进制的 10）</li></ul></li><li>八进制 <ul><li>前缀：<code>0o</code> 或 <code>0O</code>（部分语言如 C/C++ 早期仅用 0，但易混淆，现代语言推荐 0o）</li><li>示例：<code>0o12</code>（表示十进制的 10）</li></ul></li><li>十六进制 <ul><li>前缀：<code>0x</code> 或 <code>0X</code></li><li>示例：<code>0xA</code>（表示十进制的 10）</li></ul></li></ul><h3 id="十进制-整数-转为二进制" tabindex="-1">十进制(整数)转为二进制 <a class="header-anchor" href="#十进制-整数-转为二进制" aria-label="Permalink to &quot;十进制(整数)转为二进制&quot;">​</a></h3><p><code>除2取余，逆序排列</code>（除2直到商为0）</p><p>如：255（十进制）=11111111（二进制）</p><p>255/2=127=====余1</p><p>127/2=63======余1</p><p>63/2=31=======余1</p><p>31/2=15=======余1</p><p>15/2=7========余1</p><p>7/2=3=========余1</p><p>3/2=1=========余1</p><p>1/2=0=========余1</p><h3 id="十进制-小数-转为二进制" tabindex="-1">十进制(小数)转为二进制 <a class="header-anchor" href="#十进制-小数-转为二进制" aria-label="Permalink to &quot;十进制(小数)转为二进制&quot;">​</a></h3><p><code>乘2取整，顺序排列</code>（乘2直到积为整数）</p><p>案例1：如 0.625=（0.101）</p><p>0.625*2=1.25======取出整数部分1</p><p>0.25*2=0.5========取出整数部分0</p><p>0.5*2=1==========取出整数部分1</p><h3 id="二进制转为十进制" tabindex="-1">二进制转为十进制 <a class="header-anchor" href="#二进制转为十进制" aria-label="Permalink to &quot;二进制转为十进制&quot;">​</a></h3><p>【例题】把二进制1.1101转化为十进制数。</p><p>解析：整数部分转化为十进制数是1=1，</p><p>小数部分1+1+0+1=0.8125，</p><p>则二进制数1.1101对应的十进制数是1.8125。</p><h3 id="二进制转十六进制" tabindex="-1">二进制转十六进制 <a class="header-anchor" href="#二进制转十六进制" aria-label="Permalink to &quot;二进制转十六进制&quot;">​</a></h3><p>四位二进制数看作一个整体，那么刚好与十六进制的一个数对应</p><p>案例1：（10111101010）= 0101 1110 1010 =5EA</p><hr><p>1比特（1位数据）可以表示2个数：0，1<br> 2比特（2位数据）可以表示4个数：00,01,10,11<br> 3比特（3位数据）可以表示8个数：000，001，010，100，011，101，110，111（8进制）<br> 4比特（4位数据）可以表示16个数：.....（16进制正好16个数）<br> ......<br> 8比特（8位数据）可以表示2^8（256）个数：（0～255）</p><p>十进制 -&gt; 二进制 -&gt; 十六进制<br> 255 -&gt; 1111 1111 -&gt; ff</p><p>所以：<br> 2位十六进制的数，就是8比特，也就是1字节<br> 计算机里存的都是二进制，为了方便看，二进制会被转换为十六进制</p><p>内存通常是以字节（8 位二进制，也就是 8 比特）为基本的可寻址单元，<br> 从硬件角度去访问内存数据时，一般是按字节或者多个字节（如字长对应的字节数，常见的 32 位机器字长对应 4 字节，64 位机器字长对应 8 字节等）为单位进行读取操作</p><p>所以我的电脑是64位的机器，打开一个二进制的文件，会看到一堆十六进制的数字 2个符号一起，代表1字节，8个连续的2符号，表示8字节</p>',34)])])}const u=a(t,[["render",l]]);export{_ as __pageData,u as default};
