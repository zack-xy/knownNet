import{_ as c}from"./chunks/MyCodes.zVfywWUu.js";import{_ as p}from"./chunks/theme.CSHAvRhj.js";import{_ as d,c as r,o as n,G as a,j as i,aG as t,b as h,a as l,w as m,aH as f}from"./chunks/framework.CdnsPyyz.js";const y=JSON.parse('{"title":"CSS布局之flex","description":"","frontmatter":{"title":"CSS布局之flex","author":"Zack Zheng","date":"2022/11/09 00:00","categories":["CSS专栏"],"tags":["CSS"]},"headers":[],"relativePath":"program/specialColumn/CSS专栏/CSS布局之flex.md","filePath":"program/specialColumn/CSS专栏/CSS布局之flex.md","lastUpdated":1750131272000}'),b={name:"program/specialColumn/CSS专栏/CSS布局之flex.md"};function g(k,e,u,x,_,F){const s=p,o=c;return n(),r("div",null,[a(s,{src:"https://s11.ax1x.com/2024/02/24/pFU7NJe.png"}),e[0]||(e[0]=i("h4",{id:"flex容器属性",tabindex:"-1"},[l("Flex容器属性 "),i("a",{class:"header-anchor",href:"#flex容器属性","aria-label":'Permalink to "Flex容器属性"'},"​")],-1)),a(s,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/584b5a15ed2b45bba8615773ca4291cc~tplv-k3u1fbpfcp-zoom-1.image"}),e[1]||(e[1]=i("h5",{id:"justify-content",tabindex:"-1"},[l("justify-content "),i("a",{class:"header-anchor",href:"#justify-content","aria-label":'Permalink to "justify-content"'},"​")],-1)),a(s,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9308d6f3fb47a4ade43903e5e2fe11~tplv-k3u1fbpfcp-zoom-1.image"}),e[2]||(e[2]=t('<h5 id="align-item和align-content的区别是什么" tabindex="-1">align-item和align-content的区别是什么 <a class="header-anchor" href="#align-item和align-content的区别是什么" aria-label="Permalink to &quot;align-item和align-content的区别是什么&quot;">​</a></h5><p>align-content是分配侧轴剩余空间，<b>只有当flex-wrap属性的值非<code>nowrap</code>才生效，也就是要换行</b><br> align-item是侧轴对齐方式（不必非得换行），如果是多行的话，每一行有自己的主轴和侧轴</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>Flex容器上，如果同时设置了<code>align-content</code>为<b>非<code>stretch</code></b>和<code>align-item</code>的任意值，以<code>align-content</code>为主，<code>align-item</code>被忽略</li><li>Flex容器上，如果设置了<code>align-content</code>为<code>stretch</code>(默认值)和<code>align-item</code>的任意值，以<code>align-item</code>为主，<code>align-content</code>被忽略</li><li>Flex项目上的<code>align-self</code>只有<code>align-content</code>属性值为<code>stretch</code>时，<code>align-self</code>属性的值才有效</li><li><code>align-items</code>和<code>align-self</code>可以同时使用</li></ul></div><h5 id="主轴对齐方式" tabindex="-1">主轴对齐方式 <a class="header-anchor" href="#主轴对齐方式" aria-label="Permalink to &quot;主轴对齐方式&quot;">​</a></h5><p>侧轴有对齐方式，但是主轴没有相应的对齐方式属性，只有分配侧轴的空间<code>justify-content</code><br> 想要设置主轴对齐方式，需要使用<code>margin</code>（设置在Flex项目上）</p>',5)),a(s,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b097664d9f44f878037c2ed37d81496~tplv-k3u1fbpfcp-zoom-1.image"}),(n(),h(f,null,{default:m(()=>[a(o,{title:"margin:auto对溢出的处理",repo:"o-bricks",path:"web_layout/flex/overflow.html",lazy:""})]),_:1})),e[3]||(e[3]=i("h4",{id:"flex项目属性",tabindex:"-1"},[l("Flex项目属性 "),i("a",{class:"header-anchor",href:"#flex项目属性","aria-label":'Permalink to "Flex项目属性"'},"​")],-1)),a(s,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d832f3e72844710b90bfb3f067cb0c7~tplv-k3u1fbpfcp-zoom-1.image"}),e[4]||(e[4]=t(`<h5 id="flex的设置" tabindex="-1">flex的设置 <a class="header-anchor" href="#flex的设置" aria-label="Permalink to &quot;flex的设置&quot;">​</a></h5><ul><li><code>flex: auto</code>Flex项目被分配不同大小，较大的Flex项目获得更多空间</li><li><code>flex: 1</code>Flex项目（几乎）平均分配空间大小</li><li><code>flex: initial</code>Flex根据自身确定尺寸，不会扩展，但是会收缩适应Flex容器</li><li><code>flex: none</code>Flex根据自身确定尺寸，即不会扩展也不会收缩适应Flex容器</li></ul><h5 id="实现所有项目宽度相等" tabindex="-1">实现所有项目宽度相等 <a class="header-anchor" href="#实现所有项目宽度相等" aria-label="Permalink to &quot;实现所有项目宽度相等&quot;">​</a></h5><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  flex</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  min-width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,4))])}const D=d(b,[["render",g]]);export{y as __pageData,D as default};
