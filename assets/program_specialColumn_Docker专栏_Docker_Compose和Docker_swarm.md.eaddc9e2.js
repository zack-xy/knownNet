import{_ as s,c as n,o as a,a as e}from"./app.e7573773.js";const C=JSON.parse('{"title":"Docker Compose","description":"","frontmatter":{"title":"Docker Compose","author":"Zack Zheng","date":"2025/01/06 15:51","categories":["Docker专栏"],"tags":["Docker"]},"headers":[],"relativePath":"program/specialColumn/Docker专栏/Docker_Compose和Docker_swarm.md","lastUpdated":1736214189000}'),l={name:"program/specialColumn/Docker专栏/Docker_Compose和Docker_swarm.md"},o=e(`<p>Docker Compose是一个用于定义和运行多容器Docker应用程序的工具。允许使用YAML文件来配置应用程序的服务，并通过单个命令启动、停止和管理整个应用程序。</p><h4 id="compose文件的结构和版本" tabindex="-1">compose文件的结构和版本 <a class="header-anchor" href="#compose文件的结构和版本" aria-hidden="true">#</a></h4><p><a href="https://docs.docker.com/reference/compose-file/" target="_blank" rel="noreferrer">compose官方指引</a></p><h5 id="基本语法结构" tabindex="-1">基本语法结构 <a class="header-anchor" href="#基本语法结构" aria-hidden="true">#</a></h5><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3.8</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 容器</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">servicename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 服务名字，这个名字也是内部 bridge网络可以使用的 DNS name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 镜像的名字，会从本地加载镜像，如果本地没有，从docker hub拉取</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./test</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 也可以使用build，即从当前目录的test文件夹中使用Dockerfile构建镜像（镜像的名字可以用上面的image配置指定）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定参数的方式</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./test</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 指定目录</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">dockerfile</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile.dev</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 指定Dockerfile文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，如果设置，则会覆盖默认镜像里的 CMD命令</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，相当于 docker run里的 --env</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，相当于docker run里的 -v</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，相当于 docker run里的 --network</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，相当于 docker run里的 -p</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">servicename2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，相当于 docker volume create</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 可选，相当于 docker network create</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;3.8&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">services</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 容器</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">servicename</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 服务名字，这个名字也是内部 bridge网络可以使用的 DNS name</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 镜像的名字，会从本地加载镜像，如果本地没有，从docker hub拉取</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">build</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">./test</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># 也可以使用build，即从当前目录的test文件夹中使用Dockerfile构建镜像（镜像的名字可以用上面的image配置指定）</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">build</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 指定参数的方式</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">./test</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># 指定目录</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E06C75;">dockerfile</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Dockerfile.dev</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># 指定Dockerfile文件</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，如果设置，则会覆盖默认镜像里的 CMD命令</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">environment</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，相当于 docker run里的 --env</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">volumes</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，相当于docker run里的 -v</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">networks</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，相当于 docker run里的 --network</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">ports</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，相当于 docker run里的 -p</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">servicename2</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">volumes</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，相当于 docker volume create</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">networks</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 可选，相当于 docker network create</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-hidden="true">#</a></h5><p>⚠️运行docker-compose命令需要在docker-compose.yml文件目录</p><ul><li><p>启动：<code>docker-compose up</code> (前台执行)</p></li><li><p>启动:<code>docker-compose up -d</code> (后台运行)</p></li><li><p>查看log: <code>docker-compose logs </code> / <code>docker-compose logs -f</code> (持续动态查看)</p></li><li><p>查看运行：<code>docker-compose ps</code></p></li><li><p>停止: <code>docker-compose stop</code></p></li><li><p>删除：<code>docker-compose rm</code> (删除后台停止的通过compose创建的容器，只能删除容器，不会删除网络，需要手动删除网络，或者使用<code>docker system prune -f</code>清理网络）</p></li><li><p>指定名字：<code>docker-compose -p myproject up -d</code>(默认是文件夹的名字，这里使用-p指定了名字为myproject, ‼️ps命令和删除命令都要加 -p )</p></li><li><p>构建镜像：<code>docker-compose build</code> (从本地Dockerfile中构建镜像)</p></li><li><p>拉取镜像：<code>docker-compose pull</code></p></li></ul><hr><h5 id="docker-compose服务更新" tabindex="-1">Docker compose服务更新 <a class="header-anchor" href="#docker-compose服务更新" aria-hidden="true">#</a></h5><p>如果本地镜像的文件变更了，本地镜像不会自动重新build，如果只是使用up，compose启动的镜像使用的是旧的镜像。需要下面这样启动</p><p><code>docker-compose up -d --build</code></p><p>其他常用</p><p><code>docker-compose up -d --remove-orphans</code> （删除无用的容器）</p><p><code>docker-compose restart</code> (重启)</p><hr><h5 id="水平扩展" tabindex="-1">水平扩展 <a class="header-anchor" href="#水平扩展" aria-hidden="true">#</a></h5><p><code>docker-compose up -d --scale flask=3</code> (扩展flask容器 = 3)</p><p>去ping flask，docker会做负载均衡，就是每次ping，返回3个flask中之一</p><hr><h5 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-hidden="true">#</a></h5><p>1、创建.env文件 内容：REDIS_PASSWORD=abc123</p><p>2、在docker-compose.yml中使用</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">REDIS_PASS=$(REDIS_PASSWORD)</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#E06C75;">environment</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">	- </span><span style="color:#98C379;">REDIS_PASS=$(REDIS_PASSWORD)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>验证配置文件：</p><p><code>docker-compose config</code></p><hr><p>健康检查</p><hr><p>‼️Docker compose是单机的，不建议在生产环境使用</p><p>Docker swarm是用来做多机器容器编排的，k8s是领先地位</p>`,31),p=[o];function c(r,t,i,y,d,m){return a(),n("div",null,p)}const A=s(l,[["render",c]]);export{C as __pageData,A as default};
