import{_ as a,c as i,o as s,aG as l}from"./chunks/framework.DGtm8y85.js";const k=JSON.parse('{"title":"Dockerfile构建Docker镜像一","description":"","frontmatter":{"title":"Dockerfile构建Docker镜像一","author":"Zack Zheng","date":"2024/01/02 13:48","categories":["Docker专栏"],"tags":["Docker"]},"headers":[],"relativePath":"program/specialColumn/Docker专栏/Dockerfile构建镜像.md","filePath":"program/specialColumn/Docker专栏/Dockerfile构建镜像.md","lastUpdated":1735883652000}'),n={name:"program/specialColumn/Docker专栏/Dockerfile构建镜像.md"};function t(r,e,o,h,p,c){return s(),i("div",null,e[0]||(e[0]=[l(`<ul><li>Dockerfile是用于构建docker镜像的文件</li><li>Dockerfile里包含了构建镜像所需的“指令”</li><li>Dockerfile有其特定的语法规则</li></ul><h3 id="根据dockerfile构建镜像" tabindex="-1">根据dockerfile构建镜像 <a class="header-anchor" href="#根据dockerfile构建镜像" aria-label="Permalink to &quot;根据dockerfile构建镜像&quot;">​</a></h3><p>在ubuntu:21.04中运行hello.py代码</p><p>1、Dockerfile</p><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> ubuntu:22.04</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#F78C6C;">RUN</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> apt-get update &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.10 python3-pip python3.10-dev</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#F78C6C;">ADD</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> hello.py /</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#F78C6C;">CMD</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">&quot;python3&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">&quot;/hello.py&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>（CMD就是容器启动默认启动的程序）</p><p>2、hello.py</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">hello docker</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、以上2个文件在同一文件夹下，运行</p><p><code>docker image build -t hello .</code></p><p>(-t就是tag，名字，这里的名字是hello，后面可以跟版本，比如hello:1.0，什么都不加，默认是latest，最后面的点. 是当前文件夹的意思，如果有copy文件，就是从当前文件夹下copy文件)</p><h3 id="上传镜像到docker-hub" tabindex="-1">上传镜像到Docker hub <a class="header-anchor" href="#上传镜像到docker-hub" aria-label="Permalink to &quot;上传镜像到Docker hub&quot;">​</a></h3><h4 id="_1-将镜像的名字改成规范的【用户名-镜像名-版本】" tabindex="-1">1. 将镜像的名字改成规范的【用户名/镜像名:版本】 <a class="header-anchor" href="#_1-将镜像的名字改成规范的【用户名-镜像名-版本】" aria-label="Permalink to &quot;1. 将镜像的名字改成规范的【用户名/镜像名:版本】&quot;">​</a></h4><h5 id="方法一-重新生成镜像-需要符合镜像名规范" tabindex="-1">方法一：重新生成镜像，需要符合镜像名规范 <a class="header-anchor" href="#方法一-重新生成镜像-需要符合镜像名规范" aria-label="Permalink to &quot;方法一：重新生成镜像，需要符合镜像名规范&quot;">​</a></h5><p><code>docker image build -t zackzheng94/hello:1.0 .</code></p><h5 id="方法二-改已生成的镜像的tag" tabindex="-1">方法二：改已生成的镜像的tag <a class="header-anchor" href="#方法二-改已生成的镜像的tag" aria-label="Permalink to &quot;方法二：改已生成的镜像的tag&quot;">​</a></h5><p><code>docker image tag hello zackzheng94/hello:1.0</code></p><h4 id="_2-将镜像推送到docker-hub" tabindex="-1">2. 将镜像推送到docker hub <a class="header-anchor" href="#_2-将镜像推送到docker-hub" aria-label="Permalink to &quot;2. 将镜像推送到docker hub&quot;">​</a></h4><h5 id="登陆docker-hub" tabindex="-1">登陆docker hub <a class="header-anchor" href="#登陆docker-hub" aria-label="Permalink to &quot;登陆docker hub&quot;">​</a></h5><p><code>docker login</code></p><h5 id="推送" tabindex="-1">推送 <a class="header-anchor" href="#推送" aria-label="Permalink to &quot;推送&quot;">​</a></h5><p><code>docker image push zackzheng94/hello:1.0</code></p>`,22)]))}const u=a(n,[["render",t]]);export{k as __pageData,u as default};
