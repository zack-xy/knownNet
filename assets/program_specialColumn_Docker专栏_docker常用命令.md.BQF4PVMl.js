import{_ as n,c as t,o as l,aG as e,j as a,a as i}from"./chunks/framework.DGtm8y85.js";const g=JSON.parse('{"title":"Docker常用命令","description":"","frontmatter":{"title":"Docker常用命令","author":"Zack Zheng","date":"2023/03/24 15:59","categories":["Docker专栏"],"tags":["Docker"]},"headers":[],"relativePath":"program/specialColumn/Docker专栏/docker常用命令.md","filePath":"program/specialColumn/Docker专栏/docker常用命令.md","lastUpdated":1735892649000}'),o={name:"program/specialColumn/Docker专栏/docker常用命令.md"},r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"29.478ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 13029.4 1000","aria-hidden":"true"};function p(T,s,c,Q,m,k){return l(),t("div",null,[s[9]||(s[9]=e('<h3 id="帮助启动类命令" tabindex="-1">帮助启动类命令 <a class="header-anchor" href="#帮助启动类命令" aria-label="Permalink to &quot;帮助启动类命令&quot;">​</a></h3><p>== systemctl是Centos中管理后台运行的服务 ==</p><ul><li>启动Docker: <code>systemctl start docker</code></li><li>停止Docker: <code>systemctl stop docker</code></li><li>重启Docker: <code>systemctl restart docker</code></li><li>查看Docker状态: <code>systemctl status docker</code></li><li>开机启动: <code>systemctl enable docker</code></li><li>查看Docker概要信息: <code>docker info</code></li><li>查看Docker总体帮助文档: <code>docker --help</code></li><li>查看Docker命令帮助文档: <code>docker 具体命令 --help</code></li></ul><h3 id="镜像命令" tabindex="-1">镜像命令 <a class="header-anchor" href="#镜像命令" aria-label="Permalink to &quot;镜像命令&quot;">​</a></h3>',4)),a("ul",null,[s[7]||(s[7]=e("<li><p>列出本地主机上的镜像：<code>docker image ls</code><br> OPTIONS:<br> -a: 列出本地所有镜像（含历史镜像层）<br> -q: 只显示镜像id</p></li><li><p>查看镜像的详细信息：<code>docker image inspect 镜像id</code></p></li><li><p>查某个镜像：<code>docker image search 某个xx镜像名字 </code></p><p>OPTIONS:</p><p>--limit: 只列出N个镜像，默认25个</p></li><li><p>拉某个镜像: <code>docker image pull 某个xx镜像名字</code></p><p>docker pull 镜像名字[:TAG]，比如docker pull redis:6.0.8</p><p>没有TAG就是最新版，等价于docker pull 镜像名字:lates</p></li><li><p>查看镜像/容器/数据卷所占的空间：<code>docker image system df</code></p></li>",5)),a("li",null,[s[4]||(s[4]=a("p",null,[i("删除镜像："),a("code",null,"docker image rm 镜像id")],-1)),s[5]||(s[5]=a("p",null,"-f 强制删除",-1)),a("p",null,[s[2]||(s[2]=i("删除全部：docker image rm -f ",-1)),a("mjx-container",r,[(l(),t("svg",d,s[0]||(s[0]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(909,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1394,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1827,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2348,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2814,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3265,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3610,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4488,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5017,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5494,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5960,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7651.4,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8111.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8640.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9029.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9529.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(10029.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">注</text></g><g data-mml-node="mi" transform="translate(11029.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">释</text></g><g data-mml-node="mi" transform="translate(12029.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g></g></g>',1)]))),s[1]||(s[1]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mo",{stretchy:"false"},"("),a("mi",null,"d"),a("mi",null,"o"),a("mi",null,"c"),a("mi",null,"k"),a("mi",null,"e"),a("mi",null,"r"),a("mi",null,"i"),a("mi",null,"m"),a("mi",null,"a"),a("mi",null,"g"),a("mi",null,"e"),a("mi",null,"s"),a("mo",null,"−"),a("mi",null,"q"),a("mi",null,"a"),a("mo",{stretchy:"false"},")"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"/")]),a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"/")]),a("mi",{mathvariant:"normal"},"注"),a("mi",{mathvariant:"normal"},"释"),a("mi",null,"：")])],-1))]),s[3]||(s[3]=i("()里面是【镜像命令】第一个列出了所有镜像只显示镜像id",-1))]),s[6]||(s[6]=a("p",null,[i("❓什么是虚悬镜像❓:就是Repository(仓库名)和Tag(标签)都是"),a("code",null,"<none>"),i(",这种镜像没什么用，可以删除")],-1))]),s[8]||(s[8]=e("<li><p>删除所有没有使用的镜像：<code>docker image prune -a</code></p></li><li><p>保存镜像 <code>docker image save nginx:1.20.0 -o nginx.image</code><br> (-o表示导出，nginx.image是导出的文件名)</p></li><li><p>导入镜像 <code>docker image load -i .\\nginx.image</code><br> (-i表示导入)</p></li><li><p>容器生成镜像 <code>docker container commit container的id 镜像:版本</code></p></li>",4))]),s[10]||(s[10]=e(`<h3 id="容器命令" tabindex="-1">容器命令 <a class="header-anchor" href="#容器命令" aria-label="Permalink to &quot;容器命令&quot;">​</a></h3><h4 id="命令基本格式-docker-container-操作" tabindex="-1">命令基本格式：<code>docker container 操作</code> <a class="header-anchor" href="#命令基本格式-docker-container-操作" aria-label="Permalink to &quot;命令基本格式：\`docker container 操作\`&quot;">​</a></h4><p>（container可以省略，最好写上，清晰一些）</p><ul><li><p>新建+启动容器：<code>docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p><p>OPTIONS:</p><p>--name=&quot;容器新名字&quot;</p><p>-d: 后台运行容器并返回容器id，即启动守护式容器（后台运行）</p><p>将后台运行的容器attach到前台:<code>docker attach 容器id</code> （不推荐，ctrl+c会退出容器的运行）</p><p>-i: 以交互模式运行容器，通常与-t同时使用</p><p>-t：为容器重新分配一个伪输入终端，通常与-i一起使用（启动交互式容器）</p><p>(例子：docker run -it --name=my-ubuntu ubuntu /bin/bash)</p><p>-P：随机端口映射</p><p>-p：指定端口映射. -p 8080:80</p></li><li><p>列出正在运行的容器：<code>docker container ps [OPTIONS]</code></p><p>OPTIONS:</p><p>-a: 列出当前所有正在运行的容器+历史运行过的</p><p>-l: 显示最近创建的容器</p><p>-n：显示最近n个创建的容器</p><p>-q： 静默模式，只显示容器编号</p></li><li><p>退出容器</p><ul><li>exit run进去容器，exit退出，容器停止</li><li>ctrl+p+q run进去容器,容器不停止</li></ul></li><li><p>启动停止的容器：<code>docker start 容器ID或者容器名 </code></p></li><li><p>重启容器： <code>docker restart 容器ID或者容器名</code></p></li><li><p>停止容器: <code>docker stop 容器ID或者容器名</code><br> 一次性停止所有的容器：<code>docker container stop $(docker container ps -aq)</code><br> （<code>docker container ps -aq</code>会列出所有容器的id）</p></li><li><p>强制停止容器: <code>docker kill 容器ID或者容器名</code></p></li><li><p>删除已停止的容器: <code>docker rm 容器ID</code></p><p>一次性删除多个容器：</p><p><code>docker container rm -f $(docker ps -a -q)</code><br> rm不能删除正在运行的容器，-f表示强制删除。</p></li><li><p>清理所有已停止的容器: <code>docker system prune -f</code></p></li><li><p>查看容器网络</p><p><code>docker network ls</code></p><p><code>docker network inspect 容器名</code></p></li><li><p>查看容器日志： <code>docker logs 容器ID </code><br> (动态跟踪logs:<code>docker logs -f 容器ID</code>)</p></li><li><p>查看容器内运行的进程： <code>docker top 容器ID </code></p></li><li><p>查看容器内部细节： <code>docker inspect 容器ID </code></p></li><li><p>进入正在运行的容器并以命令行交互：</p><ul><li><code>docker exec -it 容器ID sh</code> （打开新的终端，启动新的进程，使用exit退出不会导致容器停止 ）</li><li><code>docker attach 容器ID</code> （直接进入容器启动的命令终端，不会启动新的进程，用exit退出会导致容器停止）</li></ul></li><li><p>从容器内拷贝文件到主机 ： <code>docker cp 容器ID:容器内路径 目的主机路径</code></p></li><li><p>导入和导出容器：</p><p><code>docker export 容器ID &gt; 文件名.tar</code></p><p><code>cat 文件名.tar | docker import - 镜像用户/镜像名：镜像版本号 </code></p></li></ul><hr><h3 id="volume命令" tabindex="-1">Volume命令 <a class="header-anchor" href="#volume命令" aria-label="Permalink to &quot;Volume命令&quot;">​</a></h3><ul><li>列出volume: <code>docker volume ls</code></li><li>查看具体信息：<code>docker volume inspect volume的名字</code></li><li>删除未使用的所有volume：<code>docker volume prune</code></li></ul><hr><h3 id="运行docker-container-run后发生了什么" tabindex="-1">运行<code>docker container run</code>后发生了什么？ <a class="header-anchor" href="#运行docker-container-run后发生了什么" aria-label="Permalink to &quot;运行\`docker container run\`后发生了什么？&quot;">​</a></h3><p>下面以这一行语句为例：<br><code>docker container run -d -p 80:80 --name webhost nginx</code></p><ul><li><ol><li>在本地查找是否有nginx这个image镜像</li></ol></li><li><ol start="2"><li>去远程image registry查找nginx镜像(默认的registry是Docker Hub)</li></ol></li><li><ol start="3"><li>下载最新版本的nginx镜像（nginx:latest默认）</li></ol></li><li><ol start="4"><li>基于nginx镜像来创建一个新的容器，并且准备运行</li></ol></li><li><ol start="5"><li>docker engine分配给这个容器一个虚拟ip地址</li></ol></li><li><ol start="6"><li>在宿主机上打开80端口并把这个容器的80端口转发到宿主机上</li></ol></li><li><ol start="7"><li>启动容器，运行指定的命令（这里是一个shell脚本去启动nginx）</li></ol></li></ul><hr><h3 id="docker-compose是啥" tabindex="-1">docker-compose是啥 <a class="header-anchor" href="#docker-compose是啥" aria-label="Permalink to &quot;docker-compose是啥&quot;">​</a></h3><p>Compose 项⽬是 Docker 官⽅的开源项⽬，负责实现对 Docker 容器集群的快速编排</p><p>允许⽤户通过⼀个单独的 docker-compose.yml 模板⽂件（YAML 格式） 来定义⼀组相关联的应⽤容器为⼀个项⽬</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># Use root/example as user/password credentials</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">version</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">3.1</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">services</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">  db</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    image</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> mysql</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    # NOTE: use of &quot;mysql_native_password&quot; is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    # (this is just an example, not intended to be a production configuration)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    command</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> --default-authentication-plugin=mysql_native_password</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    restart</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> always</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    environment</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 123456</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    ports</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">      -</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> 3090:3306</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 前面一个端口是宿主机的端口，后面一个是adminer镜像端口, adminer是一个mysql管理客户端</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">  adminer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    image</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> adminer</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    restart</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> always</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    ports</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">      -</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> 8090:8080</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 前面一个端口是宿主机的端口，后面一个是adminer端口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>运行<code>docker-compose up</code>启动多个镜像（参数-d后台启动）</p>`,17))])}const u=n(o,[["render",p]]);export{g as __pageData,u as default};
