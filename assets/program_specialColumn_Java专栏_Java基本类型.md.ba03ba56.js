import{_ as s,c as a,o as n,a as l}from"./app.307726e6.js";const D=JSON.parse('{"title":"Java基本类型","description":"","frontmatter":{"title":"Java基本类型","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["Java专栏"],"tags":["Java"]},"headers":[],"relativePath":"program/specialColumn/Java专栏/Java基本类型.md","lastUpdated":1716899662000}'),p={name:"program/specialColumn/Java专栏/Java基本类型.md"},e=l(`<h4 id="java中有8种基本类型-4种整型、2种浮点、1种unicode编码字符char、一种布尔boolean" tabindex="-1">Java中有8种基本类型（4种整型、2种浮点、1种Unicode编码字符char、一种布尔boolean） <a class="header-anchor" href="#java中有8种基本类型-4种整型、2种浮点、1种unicode编码字符char、一种布尔boolean" aria-hidden="true">#</a></h4><h5 id="_4种整型" tabindex="-1">4种整型： <a class="header-anchor" href="#_4种整型" aria-hidden="true">#</a></h5><blockquote><p>byte 1字节<br> short 2字节<br> int 4字节<br> long 8字节</p></blockquote><blockquote><p>int最常用，最大正负20亿、byte和short一般用于特定场合比如底层的文件处理或者需要控制占用存储空间量的大数组、long整型有一个后缀L或者l</p></blockquote><blockquote><p>十六进制：前缀0x或0X<br> 八进制：前缀0<br> 二进制：前缀0b或0B</p></blockquote><h5 id="_2种浮点" tabindex="-1">2种浮点： <a class="header-anchor" href="#_2种浮点" aria-hidden="true">#</a></h5><blockquote><p>float 4字节<br> double 8字节</p></blockquote><p>一般都用double双精度，很少用float，float后缀f或者F，默认是double</p><p>正无穷大: Double.POSITIVE_INFINITY<br> 负无穷大：Double.NEGATIVE_INFINITY<br> 不是一个数字(NaN)：Double.NaN</p><p>⚠️：浮点数不能用于金融计算中，会有误差，跟js计算误差一样的，需要用BigDecimal类</p><h5 id="_1种char" tabindex="-1">1种char： <a class="header-anchor" href="#_1种char" aria-hidden="true">#</a></h5><p>Unicode字符，字面量值需要用&#39;&#39;单引号括起来，&#39;A&#39;和&quot;A&quot;不一样，&#39;A&#39;是编码值为65所对应的字符常量，&quot;A&quot;是包含一个字符A的字符串。</p><p>char类型可以用十六进制表示，范围从\\u0000~\\Uffff</p><p>建议不使用char</p><h5 id="_1种boolean" tabindex="-1">1种boolean: <a class="header-anchor" href="#_1种boolean" aria-hidden="true">#</a></h5><p>用于逻辑判断，整数值和布尔值之间不能进行相互转换(C++中0表示false，非0表示true，在Java里不行)</p><h4 id="声明常量" tabindex="-1">声明常量 <a class="header-anchor" href="#声明常量" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> CM_PER_INCH </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.54</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 使用final声明常量，常量一般全大写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> CM_PER_INCH </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.54</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 声明在类中，static表示类的所有方法都可以用这个常量，public表示，可以在其他类中通过【类名.CM_PER_INCH】访问这个常量</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;"> CM_PER_INCH </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">2.54</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// 使用final声明常量，常量一般全大写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">final</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;"> CM_PER_INCH </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">2.54</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">   </span><span style="color:#7F848E;font-style:italic;">// 声明在类中，static表示类的所有方法都可以用这个常量，public表示，可以在其他类中通过【类名.CM_PER_INCH】访问这个常量</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="数值转换" tabindex="-1">数值转换 <a class="header-anchor" href="#数值转换" aria-hidden="true">#</a></h4><p>无精度丢失：<br> byte -&gt; int<br> short -&gt; int<br> char -&gt; int<br> int -&gt; long<br> int -&gt; double<br> float -&gt; double</p><p>有精度丢失：</p><p>long -&gt; double<br> long -&gt; float<br> int -&gt; float</p><h5 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9.977</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> nx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;">double</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">9.977</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> nx </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">) x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="枚举类型" tabindex="-1">枚举类型 <a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> SMALL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MEDIUM</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> LARGE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> EXTRA_LARGE </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">Size</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Size</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MEDIUM</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Size</span><span style="color:#E06C75;"> { </span><span style="color:#D19A66;">SMALL</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">MEDIUM</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">LARGE</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">EXTRA_LARGE</span><span style="color:#E06C75;"> }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Size</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MEDIUM</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h4><p>Java没有内置的字符串类型，Java字符串就是unicode字符序列<br> 标准Java类库中提供了预定义类String，每一个用双引号括起来的字符串都是String类的一个实例<br> 不能直接修改Java字符串中的字符，所以String类对象称为不可变字符串</p><h5 id="构建字符串" tabindex="-1">构建字符串 <a class="header-anchor" href="#构建字符串" aria-hidden="true">#</a></h5><p>连接字符串的效率比较低，每次连接字符串，都会构建一个新的String对象</p><p>如果需要许多小段字符串构建一个新的字符串，按以下步骤进行</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> builder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ch</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 拼接字符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> completedString </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#E5C07B;">StringBuilder</span><span style="color:#E06C75;"> builder </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">StringBuilder</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(ch);</span></span>
<span class="line"><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(str);</span><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// 拼接字符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> completedString </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,32),o=[e];function r(t,c,i,y,C,d){return n(),a("div",null,o)}const b=s(p,[["render",r]]);export{D as __pageData,b as default};
