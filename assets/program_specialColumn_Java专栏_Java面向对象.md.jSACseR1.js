import{_ as i,c as a,o as n,aG as l}from"./chunks/framework.CAL16D-w.js";const D=JSON.parse('{"title":"Java面向对象","description":"","frontmatter":{"title":"Java面向对象","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["Java专栏"],"tags":["Java"]},"headers":[],"relativePath":"program/specialColumn/Java专栏/Java面向对象.md","filePath":"program/specialColumn/Java专栏/Java面向对象.md","lastUpdated":1749179332000}'),p={name:"program/specialColumn/Java专栏/Java面向对象.md"};function e(h,s,t,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<p>警告⚠️：不要编写返回引用可变对象的访问器方法。如果需要，返回一个可变数据域的拷贝,应该使用clone</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;"> Date</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> getHireDay</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">Date</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> hireDay</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">clone</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="final实例域" tabindex="-1">final实例域 <a class="header-anchor" href="#final实例域" aria-label="Permalink to &quot;final实例域&quot;">​</a></h5><p>final定义实例域，大多数为基本类型，或者不可变类的域(比如String类)，对于可变的类，表示对象引用不会指示其他对象，但是这个对象可以更改</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>final修饰的类无法被继承，其中方法自动成为final，不包括域<br> final修饰的方法无法被重写</p><h5 id="静态域-类域" tabindex="-1">静态域(类域) <a class="header-anchor" href="#静态域-类域" aria-label="Permalink to &quot;静态域(类域)&quot;">​</a></h5><p>每个对象有自己的实例域的拷贝，但只有一个静态域 (下例子,1000个Employee有1000个id，但只有共享一个nextId)</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> nextId </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> id</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="静态常量" tabindex="-1">静态常量 <a class="header-anchor" href="#静态常量" aria-label="Permalink to &quot;静态常量&quot;">​</a></h5><p>可以使用Math.PI或者这个常量</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> Math</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> final</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> double</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> PI </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 3.141592653589</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h5><p>静态方法不能向对象操作，即没有this参数，不能访问实例域<br> 但是静态方法可以访问静态域，通过类名.调用</p><p>使用静态方法的2情况：</p><ul><li>一个方法不需要访问对象状态，其所需参数都是通过显式参数提供(例如：Math.pow)</li><li>一个方法只需要访问类的静态域(例如：Employee.getNextId)</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> getNextId</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // return static field</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="方法参数" tabindex="-1">方法参数 <a class="header-anchor" href="#方法参数" aria-label="Permalink to &quot;方法参数&quot;">​</a></h5><p>Java程序总是采用按值调用，方法得到的是所有参数值的一个拷贝，方法不能修改传递给它的任何参数变量的内容。如果是基本数据类型，则不会修改传入的基本类型，如果是引用类型，则传入的是对象引用，也就是对象引用的值是不能修改的（即不能修改指向其他对象）</p><h5 id="重载" tabindex="-1">重载 <a class="header-anchor" href="#重载" aria-label="Permalink to &quot;重载&quot;">​</a></h5><p>多个方法，有相同的名字，不同的参数<br> 要完整的描述一个方法，需要指出方法名及参数类型，这叫做方法的签名<br> 返回类型不是方法签名的一部分</p><h5 id="显式域初始化" tabindex="-1">显式域初始化 <a class="header-anchor" href="#显式域初始化" aria-label="Permalink to &quot;显式域初始化&quot;">​</a></h5><p>最好给域初始化值，良好的习惯</p><p>1.在构造器中设置值<br> 在构造器中可以使用this()调用其他构造器 2.在声明中赋值</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    privte </span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> id </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> assignId</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> assignId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> r</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">        nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">++;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> r</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>3.初始化块</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> id</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> double</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> salary</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    // 初始化块</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">        id </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">        nextId</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">++;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">String</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> double</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">        name </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> n</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">        salary </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">        name </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">        salary </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>对于静态域也可以使用静态初始化块</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">static</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#C792EA;">    Random</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> generator </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#C678DD;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> Random</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">   </span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">    nextId </span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> generator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">nextInt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">10000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // 小于10000的随机整数</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="类设计技巧" tabindex="-1">类设计技巧 <a class="header-anchor" href="#类设计技巧" aria-label="Permalink to &quot;类设计技巧&quot;">​</a></h5><ul><li>1.一定要保证数据私有</li><li>2.一定要对数据初始化</li><li>3.不要在类中使用过多的基本类型</li><li>4.不是所有的域都需要独立的域访问器和域更改器</li><li>5.将职责过多的类进行分解</li><li>6.类名和方法名要能够体现它们的职责</li><li>7.优先使用不可变的类（更改对象的问题在于，如果多个线程试图同时更新一个对象，就会发生并发更改。结果无法预料）</li></ul>`,31)])])}const F=i(p,[["render",e]]);export{D as __pageData,F as default};
