import{_ as e,c as l,o as a,a as t}from"./app.e9af0c90.js";const m=JSON.parse('{"title":"mySQL基础","description":"","frontmatter":{"title":"mySQL基础","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["数据库专栏"],"tags":["数据库","MySQL"]},"headers":[{"level":3,"title":"基础SELECT","slug":"基础select","link":"#基础select","children":[]},{"level":3,"title":"列的别名","slug":"列的别名","link":"#列的别名","children":[]},{"level":3,"title":"去除重复行","slug":"去除重复行","link":"#去除重复行","children":[]},{"level":3,"title":"空值参与运算","slug":"空值参与运算","link":"#空值参与运算","children":[]},{"level":3,"title":"着重号`","slug":"着重号","link":"#着重号","children":[]},{"level":3,"title":"查询常数","slug":"查询常数","link":"#查询常数","children":[]},{"level":3,"title":"显示表结构","slug":"显示表结构","link":"#显示表结构","children":[]},{"level":3,"title":"过滤数据","slug":"过滤数据","link":"#过滤数据","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"IN / NOT IN是在离散的集合里查找","slug":"in-not-in是在离散的集合里查找","link":"#in-not-in是在离散的集合里查找","children":[]},{"level":3,"title":"LIKE 模糊查询","slug":"like-模糊查询","link":"#like-模糊查询","children":[]},{"level":3,"title":"排序：ORDER BY 字段 ASC/DESC","slug":"排序-order-by-字段-asc-desc","link":"#排序-order-by-字段-asc-desc","children":[]},{"level":3,"title":"分页：LIMIT 偏移 每页数目","slug":"分页-limit-偏移-每页数目","link":"#分页-limit-偏移-每页数目","children":[]}],"relativePath":"program/specialColumn/数据库专栏/mySQL基础一.md","lastUpdated":1694092088000}'),i={name:"program/specialColumn/数据库专栏/mySQL基础一.md"},o=t('<h3 id="基础select" tabindex="-1">基础SELECT <a class="header-anchor" href="#基础select" aria-hidden="true">#</a></h3><blockquote><p>SELECT 1;</p></blockquote><p>相当于</p><blockquote><p>SELECT 1 FROM DUAL; #dual 伪表</p></blockquote><h3 id="列的别名" tabindex="-1">列的别名 <a class="header-anchor" href="#列的别名" aria-hidden="true">#</a></h3><p>列名后面空格（别名e_id) 列名后面双引号（别名里面有空格） 使用AS关键字</p><blockquote><p>SELECT employe_id e_id FROM employees;</p></blockquote><blockquote><p>SELECT employe_id AS e_id FROM employees;</p></blockquote><h3 id="去除重复行" tabindex="-1">去除重复行 <a class="header-anchor" href="#去除重复行" aria-hidden="true">#</a></h3><blockquote><p>SELECT DISTINCT department_id FROM employees;</p></blockquote><ul><li>DISTINCT要放在所有列名前面</li><li>如果同时列了2个列名，就是去重同时2个列都相同的数据</li></ul><h3 id="空值参与运算" tabindex="-1">空值参与运算 <a class="header-anchor" href="#空值参与运算" aria-hidden="true">#</a></h3><p>null值</p><blockquote><p>SELECT employee_id,salary &quot;月工资&quot;,salary * (1+commission) * 12 &quot;年工资&quot; FROM employees;</p></blockquote><p>这里的commission有可能是null，则计算出来的年工资就是null</p><blockquote><p>SELECT employee_id,salary &quot;月工资&quot;,salary * (1+IFNULL(commission,0)) * 12 &quot;年工资&quot; FROM employees;</p></blockquote><p>加了IFNULL，如果是null，则以0替换</p><h3 id="着重号" tabindex="-1">着重号` <a class="header-anchor" href="#着重号" aria-hidden="true">#</a></h3><p>表名或者字段名与数据库关键字一样，用着重号括起来用</p><h3 id="查询常数" tabindex="-1">查询常数 <a class="header-anchor" href="#查询常数" aria-hidden="true">#</a></h3><p>SELECT &quot;常数&quot; as coporate,employee_id FROM employees; 多一列coporate，值都是“常数”</p><h3 id="显示表结构" tabindex="-1">显示表结构 <a class="header-anchor" href="#显示表结构" aria-hidden="true">#</a></h3><blockquote><p>DESCRIBE employees;<br> DDESC employees;</p></blockquote><h3 id="过滤数据" tabindex="-1">过滤数据 <a class="header-anchor" href="#过滤数据" aria-hidden="true">#</a></h3><blockquote><p>SELECT * FROM employees WHERE department_id = 90;</p></blockquote><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-hidden="true">#</a></h3><p>算数运算符：+、-、*、/、div、%、mod 比较运算符：<br> = 等于（等于返回1，否则0，隐式转换，隐式无法转换，转换为0，null参与运算就是null）<br> &lt;=&gt; 安全等于（用来null判断，不是其他语言中的严格相等）<br> &lt;&gt;（!=）不等于<br> “&lt;”<br> &quot;&gt;&quot;<br> &quot;&lt;=&quot;<br> &quot;&gt;=&quot;<br> IS NULL 为空<br> IS NOT NULL 不为空<br> LEAST 最小值<br> GREATEST 最大值<br> BETWEEN AND 两值之间<br> ISNULL 为空(函数)<br> IN 属于<br> NOT IN 不属于<br> LIKE 模糊匹配<br> REGEXP 正则匹配</p><blockquote><p>SELECT name,salary,commission FROM employees WHERE commission IS NULL;<br> SELECT name,salary,commission FROM employees WHERE ISNULL(commission);</p></blockquote><blockquote><p>SELECT LEAST(&#39;g&#39;,&#39;b&#39;,&#39;t&#39;),CREATEST(&#39;g&#39;,&#39;b&#39;,&#39;t&#39;) FROM DUAL; SELECT LEAST(last_name,first_name) FROM employees; # 相当于js中的sort函数 SELECT LEAST(LENGTH(last_name),LENGTH(first_name)) FROM employees; # 比较两个字段的长度，较小长度的，列出来 SELECT employee_id,last_name,salary FROM employees WHERE salary bbetween 6000 AND 8000; # 包含边界，也可以这样写WHERE salary&gt;=6000 &amp;&amp; salary&lt;=8000</p></blockquote><h3 id="in-not-in是在离散的集合里查找" tabindex="-1">IN / NOT IN是在离散的集合里查找 <a class="header-anchor" href="#in-not-in是在离散的集合里查找" aria-hidden="true">#</a></h3><p>in(10,20,30)</p><h3 id="like-模糊查询" tabindex="-1">LIKE 模糊查询 <a class="header-anchor" href="#like-模糊查询" aria-hidden="true">#</a></h3><blockquote><p>SELECT last_name FROM employees WHERE last_name LIKE &#39;%a%&#39; # %表示不确定个数的字符（0个或者多个）<br> SELECT last_name FROM employees WHERE last_name LIKE &#39;_a%&#39; # _表示有一个字符，这句就是查询第二个字符是a的（转义字符是\\）</p></blockquote><blockquote><p>SELECT last_name FROM employees WHERE last_name LIKE &#39;_$_a&#39; ESCAPE &#39;$&#39; # 自定义转义字符为$，这句表示第2个字符为下划线，第三个字符为a</p></blockquote><p>LIKE使用正则：REGEXP</p><h3 id="排序-order-by-字段-asc-desc" tabindex="-1">排序：ORDER BY 字段 ASC/DESC <a class="header-anchor" href="#排序-order-by-字段-asc-desc" aria-hidden="true">#</a></h3><h3 id="分页-limit-偏移-每页数目" tabindex="-1">分页：LIMIT 偏移 每页数目 <a class="header-anchor" href="#分页-limit-偏移-每页数目" aria-hidden="true">#</a></h3>',37),r=[o];function s(n,d,c,h,p,E){return a(),l("div",null,r)}const b=e(i,[["render",s]]);export{m as __pageData,b as default};
