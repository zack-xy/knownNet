import{_ as r,c as l,o,aG as Q,j as e,a as t}from"./chunks/framework.CdnsPyyz.js";const c=JSON.parse('{"title":"mySQL基础","description":"","frontmatter":{"title":"mySQL基础","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["数据库专栏"],"tags":["数据库","MySQL"]},"headers":[],"relativePath":"program/specialColumn/数据库专栏/mySQL基础一.md","filePath":"program/specialColumn/数据库专栏/mySQL基础一.md","lastUpdated":1694092088000}'),s={name:"program/specialColumn/数据库专栏/mySQL基础一.md"},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},n={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.575ex"},xmlns:"http://www.w3.org/2000/svg",width:"11.81ex",height:"2.292ex",role:"img",focusable:"false",viewBox:"0 -759 5219.8 1013.1","aria-hidden":"true"};function i(m,a,d,p,u,h){return o(),l("div",null,[a[4]||(a[4]=Q('<h3 id="基础select" tabindex="-1">基础SELECT <a class="header-anchor" href="#基础select" aria-label="Permalink to &quot;基础SELECT&quot;">​</a></h3><blockquote><p>SELECT 1;</p></blockquote><p>相当于</p><blockquote><p>SELECT 1 FROM DUAL; #dual 伪表</p></blockquote><h3 id="列的别名" tabindex="-1">列的别名 <a class="header-anchor" href="#列的别名" aria-label="Permalink to &quot;列的别名&quot;">​</a></h3><p>列名后面空格（别名e_id) 列名后面双引号（别名里面有空格） 使用AS关键字</p><blockquote><p>SELECT employe_id e_id FROM employees;</p></blockquote><blockquote><p>SELECT employe_id AS e_id FROM employees;</p></blockquote><h3 id="去除重复行" tabindex="-1">去除重复行 <a class="header-anchor" href="#去除重复行" aria-label="Permalink to &quot;去除重复行&quot;">​</a></h3><blockquote><p>SELECT DISTINCT department_id FROM employees;</p></blockquote><ul><li>DISTINCT要放在所有列名前面</li><li>如果同时列了2个列名，就是去重同时2个列都相同的数据</li></ul><h3 id="空值参与运算" tabindex="-1">空值参与运算 <a class="header-anchor" href="#空值参与运算" aria-label="Permalink to &quot;空值参与运算&quot;">​</a></h3><p>null值</p><blockquote><p>SELECT employee_id,salary &quot;月工资&quot;,salary * (1+commission) * 12 &quot;年工资&quot; FROM employees;</p></blockquote><p>这里的commission有可能是null，则计算出来的年工资就是null</p><blockquote><p>SELECT employee_id,salary &quot;月工资&quot;,salary * (1+IFNULL(commission,0)) * 12 &quot;年工资&quot; FROM employees;</p></blockquote><p>加了IFNULL，如果是null，则以0替换</p><h3 id="着重号" tabindex="-1">着重号` <a class="header-anchor" href="#着重号" aria-label="Permalink to &quot;着重号`&quot;">​</a></h3><p>表名或者字段名与数据库关键字一样，用着重号括起来用</p><h3 id="查询常数" tabindex="-1">查询常数 <a class="header-anchor" href="#查询常数" aria-label="Permalink to &quot;查询常数&quot;">​</a></h3><p>SELECT &quot;常数&quot; as coporate,employee_id FROM employees; 多一列coporate，值都是“常数”</p><h3 id="显示表结构" tabindex="-1">显示表结构 <a class="header-anchor" href="#显示表结构" aria-label="Permalink to &quot;显示表结构&quot;">​</a></h3><blockquote><p>DESCRIBE employees;<br> DDESC employees;</p></blockquote><h3 id="过滤数据" tabindex="-1">过滤数据 <a class="header-anchor" href="#过滤数据" aria-label="Permalink to &quot;过滤数据&quot;">​</a></h3><blockquote><p>SELECT * FROM employees WHERE department_id = 90;</p></blockquote><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><p>算数运算符：+、-、*、/、div、%、mod 比较运算符：<br> = 等于（等于返回1，否则0，隐式转换，隐式无法转换，转换为0，null参与运算就是null）<br> &lt;=&gt; 安全等于（用来null判断，不是其他语言中的严格相等）<br> &lt;&gt;（!=）不等于<br> “&lt;”<br> &quot;&gt;&quot;<br> &quot;&lt;=&quot;<br> &quot;&gt;=&quot;<br> IS NULL 为空<br> IS NOT NULL 不为空<br> LEAST 最小值<br> GREATEST 最大值<br> BETWEEN AND 两值之间<br> ISNULL 为空(函数)<br> IN 属于<br> NOT IN 不属于<br> LIKE 模糊匹配<br> REGEXP 正则匹配</p><blockquote><p>SELECT name,salary,commission FROM employees WHERE commission IS NULL;<br> SELECT name,salary,commission FROM employees WHERE ISNULL(commission);</p></blockquote><blockquote><p>SELECT LEAST(&#39;g&#39;,&#39;b&#39;,&#39;t&#39;),CREATEST(&#39;g&#39;,&#39;b&#39;,&#39;t&#39;) FROM DUAL; SELECT LEAST(last_name,first_name) FROM employees; # 相当于js中的sort函数 SELECT LEAST(LENGTH(last_name),LENGTH(first_name)) FROM employees; # 比较两个字段的长度，较小长度的，列出来 SELECT employee_id,last_name,salary FROM employees WHERE salary bbetween 6000 AND 8000; # 包含边界，也可以这样写WHERE salary&gt;=6000 &amp;&amp; salary&lt;=8000</p></blockquote><h3 id="in-not-in是在离散的集合里查找" tabindex="-1">IN / NOT IN是在离散的集合里查找 <a class="header-anchor" href="#in-not-in是在离散的集合里查找" aria-label="Permalink to &quot;IN / NOT IN是在离散的集合里查找&quot;">​</a></h3><p>in(10,20,30)</p><h3 id="like-模糊查询" tabindex="-1">LIKE 模糊查询 <a class="header-anchor" href="#like-模糊查询" aria-label="Permalink to &quot;LIKE 模糊查询&quot;">​</a></h3><blockquote><p>SELECT last_name FROM employees WHERE last_name LIKE &#39;%a%&#39; # %表示不确定个数的字符（0个或者多个）<br> SELECT last_name FROM employees WHERE last_name LIKE &#39;_a%&#39; # _表示有一个字符，这句就是查询第二个字符是a的（转义字符是\\）</p></blockquote>',33)),e("blockquote",null,[e("p",null,[a[2]||(a[2]=t("SELECT last_name FROM employees WHERE last_name LIKE '_")),e("mjx-container",T,[(o(),l("svg",n,a[0]||(a[0]=[Q('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(33,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(33,-247) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(457.1,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1221.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1866.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2626.1,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3376.1,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(4127.1,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(848.3,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[1]||(a[1]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("msubsup",null,[e("mi"),e("mi",null,"a"),e("mo",{"data-mjx-alternate":"1"},"′")]),e("mi",null,"E"),e("mi",null,"S"),e("mi",null,"C"),e("mi",null,"A"),e("mi",null,"P"),e("msup",null,[e("mi",null,"E"),e("mo",{"data-mjx-alternate":"1"},"′")])])],-1))]),a[3]||(a[3]=t("' # 自定义转义字符为$，这句表示第2个字符为下划线，第三个字符为a"))])]),a[5]||(a[5]=e("p",null,"LIKE使用正则：REGEXP",-1)),a[6]||(a[6]=e("h3",{id:"排序-order-by-字段-asc-desc",tabindex:"-1"},[t("排序：ORDER BY 字段 ASC/DESC "),e("a",{class:"header-anchor",href:"#排序-order-by-字段-asc-desc","aria-label":'Permalink to "排序：ORDER BY 字段 ASC/DESC"'},"​")],-1)),a[7]||(a[7]=e("h3",{id:"分页-limit-偏移-每页数目",tabindex:"-1"},[t("分页：LIMIT 偏移 每页数目 "),e("a",{class:"header-anchor",href:"#分页-limit-偏移-每页数目","aria-label":'Permalink to "分页：LIMIT 偏移 每页数目"'},"​")],-1))])}const b=r(s,[["render",i]]);export{c as __pageData,b as default};
