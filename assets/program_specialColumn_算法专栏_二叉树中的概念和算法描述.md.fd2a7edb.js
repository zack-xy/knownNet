import{_ as l,c as i,o as t,a as e}from"./app.21fa3df7.js";const g=JSON.parse('{"title":"二叉树中的概念和算法描述","description":"","frontmatter":{"title":"二叉树中的概念和算法描述","author":"Zack Zheng","date":"2022/11/09 00:00","categories":["算法专栏"],"tags":["算法"]},"headers":[{"level":3,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]}],"relativePath":"program/specialColumn/算法专栏/二叉树中的概念和算法描述.md","lastUpdated":1723285620000}'),p={name:"program/specialColumn/算法专栏/二叉树中的概念和算法描述.md"},a=e('<h3 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-hidden="true">#</a></h3><ul><li>根节点：位于二叉树顶层的节点，没有父节点</li><li>叶节点：没有子节点的节点，其两个指针均指向none</li><li>边：连接两个节点的线段，即节点引用</li><li>层：从顶至底递增，根节点所在层为1</li><li>度：节点的子节点的数量，在二叉树中，度的取值范围是0，1，2</li><li>高度：从距离该节点最远的叶子节点到该节点所经过的边的数量。</li><li>深度：从根节点到该节点所经过的边的数量</li></ul><hr><ul><li>完美二叉树（满二叉树）：所有层的节点都被完全填满（叶节点的度为0，其余所有节点度都为2）</li><li>完全二叉树：只有最底层的节点未被填满，且最底层节点尽量靠左</li><li>完满二叉树：除了叶节点之外，其余所有节点都有两个子节点</li><li>平衡二叉树：任意节点的左子树和右子树的高度之差的绝对值不超过1</li><li>二叉搜索树：左子树的值&lt;根节点的值&lt;右子树的值，任意节点都满足。没有重复的值</li></ul><hr><ul><li>BFS（广度优先搜索）：借助队列实现</li><li>DFS（深度优先搜索）：借助递归实现（前序、中序、后序）</li></ul><hr><ul><li>二叉搜索树的操作： <ul><li>插入：</li></ul><blockquote><p>从根节点开始查找， 1.找到值相等，return 2.没找到，找到none，none的上一个节点就是要插入节点的父节点pre。 插入的节点值小于pre的值，插入pre的left节点，否则插入pre的right</p></blockquote><ul><li>删除：</li></ul><blockquote><p>从根节点开始查找</p><ol><li>找到节点，该节点度为0，是叶子节点，可以直接删除</li><li>找到节点，该节点度为1，用叶子节点替换要删除的节点</li><li>找到节点，该节点度为2，用【左子树最大节点或右子树最小节点】替换要删除的节点 若以右子树最小节点，则是待删除节点在中序遍历中的下一个节点的值</li></ol></blockquote></li></ul><hr><ul><li><p>AVL树：平衡二叉搜索树，即是二叉搜索树，也是平衡二叉树(AVL树的节点除了值属性、左右子树外，多加了一个高度属性，叶节点高度为0，空节点高度为-1)</p></li><li><p>平衡因子：左子树的高度减去右子树的高度，空节点平衡因子为0</p></li><li><p>如果平衡因子的绝对值大于1，则表示节点失衡，需要旋转来保证树的特性</p></li><li><p>旋转的操作都和失衡的节点的子节点有关，以右旋失衡节点为例，以失衡节点的子节点为圆心，顺时针旋转失衡节点</p></li><li><p>先左旋再右旋的，先左旋子节点，再右旋失衡节点</p></li><li><p>旋转分4种：左旋、右旋、先左旋后右旋、先右旋后左旋</p></li><li><p>旋转的选择：</p></li><li><p>右旋：失衡节点平衡因子&gt;1,其子节点平衡因子&gt;=0</p></li><li><p>先左旋再右旋：失衡节点平衡因子&gt;1，其子节点平衡因子&lt;0</p></li><li><p>左旋：失衡节点平衡因子&lt;-1,其子节点平衡因子&lt;=0</p></li><li><p>先右旋再左旋：失衡节点平衡因子&lt;-1,其子节点平衡因子&gt;0</p></li><li><p>如何记忆：左侧树重(平衡因子&gt;1)，需要右旋，具体只需要右旋还是先左旋再最终右旋，需要看子节点，子节点如果也是左侧重(平衡因子&gt;=0)，只需要右旋,如果子树右侧重，则子树需要先左旋</p></li></ul>',10),o=[a];function r(_,n,c,s,u,d){return t(),i("div",null,o)}const m=l(p,[["render",r]]);export{g as __pageData,m as default};
