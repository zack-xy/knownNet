import{_ as a,c as e,o as r,a as t}from"./app.55f7d5ea.js";const E=JSON.parse('{"title":"数据结构之【链表】","description":"","frontmatter":{"title":"数据结构之【链表】","author":"Zack Zheng","date":"2022/11/09 00:00","categories":["算法专栏"],"tags":["链表"]},"headers":[{"level":3,"title":"链表的实现","slug":"链表的实现","link":"#链表的实现","children":[]},{"level":3,"title":"链表的使用","slug":"链表的使用","link":"#链表的使用","children":[]}],"relativePath":"program/specialColumn/算法专栏/数据结构之【链表】.md","lastUpdated":1686640742000}'),h={name:"program/specialColumn/算法专栏/数据结构之【链表】.md"},i=t('<h3 id="链表的实现" tabindex="-1">链表的实现 <a class="header-anchor" href="#链表的实现" aria-hidden="true">#</a></h3><h4 id="链表的实现-js" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/492ba6a1b34ae88f17a1977750c4017c5564b46b/dataStructure/%E9%93%BE%E8%A1%A8/jsLinkedList.js" target="_blank" rel="noreferrer">链表的实现(js)</a> <a class="header-anchor" href="#链表的实现-js" aria-hidden="true">#</a></h4><h4 id="高效链表的实现" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/492ba6a1b34ae88f17a1977750c4017c5564b46b/dataStructure/%E9%93%BE%E8%A1%A8/%E9%AB%98%E6%95%88%E5%88%97%E8%A1%A8%E7%9A%84%E9%93%BE%E8%A1%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0.ts" target="_blank" rel="noreferrer">高效链表的实现</a> <a class="header-anchor" href="#高效链表的实现" aria-hidden="true">#</a></h4><h4 id="使用2个数组映射实现链表" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/492ba6a1b34ae88f17a1977750c4017c5564b46b/dataStructure/%E9%93%BE%E8%A1%A8/jsLinkedList2.js" target="_blank" rel="noreferrer">使用2个数组映射实现链表</a> <a class="header-anchor" href="#使用2个数组映射实现链表" aria-hidden="true">#</a></h4><h4 id="环形链表的实现" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/492ba6a1b34ae88f17a1977750c4017c5564b46b/dataStructure/%E9%93%BE%E8%A1%A8/jsCircularLinkedList.js" target="_blank" rel="noreferrer">环形链表的实现</a> <a class="header-anchor" href="#环形链表的实现" aria-hidden="true">#</a></h4><h4 id="双向链表-双指针链表" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/main/dataStructure/%E9%93%BE%E8%A1%A8/jsDoublyLinkedList.js" target="_blank" rel="noreferrer">双向链表（双指针链表）</a> <a class="header-anchor" href="#双向链表-双指针链表" aria-hidden="true">#</a></h4><h3 id="链表的使用" tabindex="-1">链表的使用 <a class="header-anchor" href="#链表的使用" aria-hidden="true">#</a></h3><h4 id="使用链表实现栈" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/492ba6a1b34ae88f17a1977750c4017c5564b46b/dataStructure/%E9%93%BE%E8%A1%A8/jsStackLinkedList.js" target="_blank" rel="noreferrer">使用链表实现栈</a> <a class="header-anchor" href="#使用链表实现栈" aria-hidden="true">#</a></h4><h4 id="有序链表" tabindex="-1"><a href="https://github.com/zack-xy/o-algorithm/blob/492ba6a1b34ae88f17a1977750c4017c5564b46b/dataStructure/%E9%93%BE%E8%A1%A8/jsSortedLinkedList.js" target="_blank" rel="noreferrer">有序链表</a> <a class="header-anchor" href="#有序链表" aria-hidden="true">#</a></h4>',9),c=[i];function d(s,o,n,l,b,_){return r(),e("div",null,c)}const f=a(h,[["render",d]]);export{E as __pageData,f as default};
