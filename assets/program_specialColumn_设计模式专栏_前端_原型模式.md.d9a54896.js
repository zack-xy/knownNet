import{_ as e,c as r,o as t,a}from"./app.d7d3a6fb.js";const _=JSON.parse('{"title":"【前端】原型模式","description":"","frontmatter":{"title":"【前端】原型模式","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["JavaScript专栏"],"tags":["设计模式"]},"headers":[{"level":2,"title":"这里主要是学习js中的原型和原型链","slug":"这里主要是学习js中的原型和原型链","link":"#这里主要是学习js中的原型和原型链","children":[{"level":3,"title":"代码演示","slug":"代码演示","link":"#代码演示","children":[]}]},{"level":2,"title":"原型和原型链","slug":"原型和原型链","link":"#原型和原型链","children":[{"level":3,"title":"函数(class)都有显式原型prototype","slug":"函数-class-都有显式原型prototype","link":"#函数-class-都有显式原型prototype","children":[]},{"level":3,"title":"对象都有隐式原型__proto__","slug":"对象都有隐式原型-proto","link":"#对象都有隐式原型-proto","children":[]},{"level":3,"title":"对象的隐式原型__proto__指向其构造函数的显式原型prototype","slug":"对象的隐式原型-proto-指向其构造函数的显式原型prototype","link":"#对象的隐式原型-proto-指向其构造函数的显式原型prototype","children":[]},{"level":3,"title":"原型链drawio示意图","slug":"原型链drawio示意图","link":"#原型链drawio示意图","children":[]}]},{"level":2,"title":"Object.create()","slug":"object-create","link":"#object-create","children":[{"level":3,"title":"{}和Object.create({})的区别","slug":"和object-create-的区别","link":"#和object-create-的区别","children":[]},{"level":3,"title":"快链-浅拷贝和深拷贝（对比学习）","slug":"快链-浅拷贝和深拷贝-对比学习","link":"#快链-浅拷贝和深拷贝-对比学习","children":[]}]},{"level":2,"title":"对象属性描述符","slug":"对象属性描述符","link":"#对象属性描述符","children":[{"level":3,"title":"Object.getOwnPropertyDescriptor，深拷贝有用过，看上面的链接","slug":"object-getownpropertydescriptor-深拷贝有用过-看上面的链接","link":"#object-getownpropertydescriptor-深拷贝有用过-看上面的链接","children":[]},{"level":3,"title":"Object.freeze","slug":"object-freeze","link":"#object-freeze","children":[]},{"level":3,"title":"Object.seal（密封，不能添加属性）","slug":"object-seal-密封-不能添加属性","link":"#object-seal-密封-不能添加属性","children":[]},{"level":3,"title":"enumerable","slug":"enumerable","link":"#enumerable","children":[]}]},{"level":2,"title":"如何遍历Symbol属性","slug":"如何遍历symbol属性","link":"#如何遍历symbol属性","children":[{"level":3,"title":"getOwnPropertySymbols(obj)","slug":"getownpropertysymbols-obj","link":"#getownpropertysymbols-obj","children":[]},{"level":3,"title":"Reflect.ownKeys(obj)","slug":"reflect-ownkeys-obj","link":"#reflect-ownkeys-obj","children":[]}]}],"relativePath":"program/specialColumn/设计模式专栏/前端_原型模式.md","lastUpdated":1684459613000}'),l={name:"program/specialColumn/设计模式专栏/前端_原型模式.md"},o=a('<h1 id="【前端】原型模式" tabindex="-1">【前端】原型模式 <a class="header-anchor" href="#【前端】原型模式" aria-hidden="true">#</a></h1><h2 id="这里主要是学习js中的原型和原型链" tabindex="-1">这里主要是学习js中的原型和原型链 <a class="header-anchor" href="#这里主要是学习js中的原型和原型链" aria-hidden="true">#</a></h2><p>不是真的【原型模式】</p><h3 id="代码演示" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.ts" target="_blank" rel="noreferrer">代码演示</a> <a class="header-anchor" href="#代码演示" aria-hidden="true">#</a></h3><h2 id="原型和原型链" tabindex="-1">原型和原型链 <a class="header-anchor" href="#原型和原型链" aria-hidden="true">#</a></h2><h3 id="函数-class-都有显式原型prototype" tabindex="-1">函数(class)都有显式原型prototype <a class="header-anchor" href="#函数-class-都有显式原型prototype" aria-hidden="true">#</a></h3><h3 id="对象都有隐式原型-proto" tabindex="-1">对象都有隐式原型__proto__ <a class="header-anchor" href="#对象都有隐式原型-proto" aria-hidden="true">#</a></h3><h3 id="对象的隐式原型-proto-指向其构造函数的显式原型prototype" tabindex="-1">对象的隐式原型__proto__指向其构造函数的显式原型prototype <a class="header-anchor" href="#对象的隐式原型-proto-指向其构造函数的显式原型prototype" aria-hidden="true">#</a></h3><h3 id="原型链drawio示意图" tabindex="-1">原型链drawio示意图<img src="https://s1.ax1x.com/2023/05/18/p9fyYZT.png" alt="原型链示意图"> <a class="header-anchor" href="#原型链drawio示意图" aria-hidden="true">#</a></h3><h2 id="object-create" tabindex="-1">Object.create() <a class="header-anchor" href="#object-create" aria-hidden="true">#</a></h2><h3 id="和object-create-的区别" tabindex="-1">{}和Object.create({})的区别 <a class="header-anchor" href="#和object-create-的区别" aria-hidden="true">#</a></h3><ul><li>{}的隐式原型指向Object.prototype</li><li>Object.create({})的隐式原型，指向传入的这个对象（一改则均改）</li></ul><h3 id="快链-浅拷贝和深拷贝-对比学习" tabindex="-1"><a href="https://zack-xy.github.io/knownNet/program/specialColumn/JavaScript%E4%B8%93%E6%A0%8F/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.html" target="_blank" rel="noreferrer">快链-浅拷贝和深拷贝（对比学习）</a> <a class="header-anchor" href="#快链-浅拷贝和深拷贝-对比学习" aria-hidden="true">#</a></h3><h2 id="对象属性描述符" tabindex="-1">对象属性描述符 <a class="header-anchor" href="#对象属性描述符" aria-hidden="true">#</a></h2><h3 id="object-getownpropertydescriptor-深拷贝有用过-看上面的链接" tabindex="-1">Object.getOwnPropertyDescriptor，深拷贝有用过，看上面的链接 <a class="header-anchor" href="#object-getownpropertydescriptor-深拷贝有用过-看上面的链接" aria-hidden="true">#</a></h3><h3 id="object-freeze" tabindex="-1">Object.freeze <a class="header-anchor" href="#object-freeze" aria-hidden="true">#</a></h3><ul><li>Object.isFrozen</li></ul><h3 id="object-seal-密封-不能添加属性" tabindex="-1">Object.seal（密封，不能添加属性） <a class="header-anchor" href="#object-seal-密封-不能添加属性" aria-hidden="true">#</a></h3><ul><li>Object.isSealed</li></ul><h3 id="enumerable" tabindex="-1">enumerable <a class="header-anchor" href="#enumerable" aria-hidden="true">#</a></h3><ul><li>是否可以for...in遍历</li><li>属性 in 对象 还是会返回true</li></ul><h2 id="如何遍历symbol属性" tabindex="-1">如何遍历Symbol属性 <a class="header-anchor" href="#如何遍历symbol属性" aria-hidden="true">#</a></h2><h3 id="getownpropertysymbols-obj" tabindex="-1">getOwnPropertySymbols(obj) <a class="header-anchor" href="#getownpropertysymbols-obj" aria-hidden="true">#</a></h3><ul><li>只出来Symbol属性</li></ul><h3 id="reflect-ownkeys-obj" tabindex="-1">Reflect.ownKeys(obj) <a class="header-anchor" href="#reflect-ownkeys-obj" aria-hidden="true">#</a></h3>',25),i=[o];function c(n,h,s,d,p,b){return t(),r("div",null,i)}const j=e(l,[["render",c]]);export{_ as __pageData,j as default};
