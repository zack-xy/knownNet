import{_ as a,c as s,o as e,a as l}from"./app.35c0ea80.js";const m=JSON.parse('{"title":"【前端】迭代器模式","description":"","frontmatter":{"title":"【前端】迭代器模式","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["JavaScript专栏"],"tags":["设计模式"]},"headers":[{"level":2,"title":"迭代器模式的实现","slug":"迭代器模式的实现","link":"#迭代器模式的实现","children":[]},{"level":2,"title":"迭代器模式的场景","slug":"迭代器模式的场景","link":"#迭代器模式的场景","children":[{"level":3,"title":"有序结构","slug":"有序结构","link":"#有序结构","children":[]}]},{"level":2,"title":"[Symbol.interator]","slug":"symbol-interator","link":"#symbol-interator","children":[{"level":3,"title":"通过获取迭代器访问数据","slug":"通过获取迭代器访问数据","link":"#通过获取迭代器访问数据","children":[]},{"level":3,"title":"类似实现Symbol.iterator","slug":"类似实现symbol-iterator","link":"#类似实现symbol-iterator","children":[]}]},{"level":2,"title":"迭代器的作用","slug":"迭代器的作用","link":"#迭代器的作用","children":[{"level":3,"title":"for....of","slug":"for-of","link":"#for-of","children":[]},{"level":3,"title":"对象数据部署[Symbol.iterator]","slug":"对象数据部署-symbol-iterator","link":"#对象数据部署-symbol-iterator","children":[]},{"level":3,"title":"迭代器模式的数据可以进行","slug":"迭代器模式的数据可以进行","link":"#迭代器模式的数据可以进行","children":[]}]},{"level":2,"title":"Generator生成器","slug":"generator生成器","link":"#generator生成器","children":[{"level":3,"title":"yield * 后面可以是一个有序结构，也就是部署了[Symbol.iterator]的数据","slug":"yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据","link":"#yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据","children":[]},{"level":3,"title":"使用yield重新写[Symbol.iterator]","slug":"使用yield重新写-symbol-iterator","link":"#使用yield重新写-symbol-iterator","children":[]},{"level":3,"title":"使用yield遍历DOM树","slug":"使用yield遍历dom树","link":"#使用yield遍历dom树","children":[]}]}],"relativePath":"program/specialColumn/设计模式专栏/前端_迭代器模式.md","lastUpdated":1684398517000}'),n={name:"program/specialColumn/设计模式专栏/前端_迭代器模式.md"},r=l("",18),o=[r];function t(p,i,c,d,y,h){return e(),s("div",null,o)}const B=a(n,[["render",t]]);export{m as __pageData,B as default};
