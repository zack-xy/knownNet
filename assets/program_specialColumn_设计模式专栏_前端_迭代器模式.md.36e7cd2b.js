import{_ as a,c as s,o as e,a as l}from"./app.b063c2c2.js";const m=JSON.parse('{"title":"【前端】迭代器模式","description":"","frontmatter":{"title":"【前端】迭代器模式","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["JavaScript专栏"],"tags":["设计模式"]},"headers":[{"level":2,"title":"迭代器模式的实现","slug":"迭代器模式的实现","link":"#迭代器模式的实现","children":[]},{"level":2,"title":"迭代器模式的场景","slug":"迭代器模式的场景","link":"#迭代器模式的场景","children":[{"level":3,"title":"有序结构","slug":"有序结构","link":"#有序结构","children":[]}]},{"level":2,"title":"[Symbol.interator]","slug":"symbol-interator","link":"#symbol-interator","children":[{"level":3,"title":"通过获取迭代器访问数据","slug":"通过获取迭代器访问数据","link":"#通过获取迭代器访问数据","children":[]},{"level":3,"title":"类似实现Symbol.iterator","slug":"类似实现symbol-iterator","link":"#类似实现symbol-iterator","children":[]}]},{"level":2,"title":"迭代器的作用","slug":"迭代器的作用","link":"#迭代器的作用","children":[{"level":3,"title":"for....of","slug":"for-of","link":"#for-of","children":[]},{"level":3,"title":"对象数据部署[Symbol.iterator]","slug":"对象数据部署-symbol-iterator","link":"#对象数据部署-symbol-iterator","children":[]},{"level":3,"title":"迭代器模式的数据可以进行","slug":"迭代器模式的数据可以进行","link":"#迭代器模式的数据可以进行","children":[]}]},{"level":2,"title":"Generator生成器","slug":"generator生成器","link":"#generator生成器","children":[{"level":3,"title":"yield * 后面可以是一个有序结构，也就是部署了[Symbol.iterator]的数据","slug":"yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据","link":"#yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据","children":[]},{"level":3,"title":"使用yield重新写[Symbol.iterator]","slug":"使用yield重新写-symbol-iterator","link":"#使用yield重新写-symbol-iterator","children":[]},{"level":3,"title":"使用yield遍历DOM树","slug":"使用yield遍历dom树","link":"#使用yield遍历dom树","children":[]}]}],"relativePath":"program/specialColumn/设计模式专栏/前端_迭代器模式.md","lastUpdated":1684398517000}'),n={name:"program/specialColumn/设计模式专栏/前端_迭代器模式.md"},r=l(`<h1 id="【前端】迭代器模式" tabindex="-1">【前端】迭代器模式 <a class="header-anchor" href="#【前端】迭代器模式" aria-hidden="true">#</a></h1><h2 id="迭代器模式的实现" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.ts" target="_blank" rel="noreferrer">迭代器模式的实现</a> <a class="header-anchor" href="#迭代器模式的实现" aria-hidden="true">#</a></h2><h2 id="迭代器模式的场景" tabindex="-1">迭代器模式的场景 <a class="header-anchor" href="#迭代器模式的场景" aria-hidden="true">#</a></h2><h3 id="有序结构" tabindex="-1">有序结构 <a class="header-anchor" href="#有序结构" aria-hidden="true">#</a></h3><ul><li>字符串</li><li>数组</li><li>NodeList等DOM集合</li><li>Map</li><li>Set</li><li>arguments</li></ul><h2 id="symbol-interator" tabindex="-1">[Symbol.interator] <a class="header-anchor" href="#symbol-interator" aria-hidden="true">#</a></h2><h3 id="通过获取迭代器访问数据" tabindex="-1">通过获取迭代器访问数据 <a class="header-anchor" href="#通过获取迭代器访问数据" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k111111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k22222</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mapInterator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> map[Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(mapInterator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Map</span><span style="color:#ABB2BF;">([[</span><span style="color:#98C379;">&#39;k1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;k111111&#39;</span><span style="color:#ABB2BF;">], [</span><span style="color:#98C379;">&#39;k2&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;k22222&#39;</span><span style="color:#ABB2BF;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mapInterator</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mapInterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="类似实现symbol-iterator" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/symbolIterator%E8%BF%AD%E4%BB%A3%E5%99%A8.ts" target="_blank" rel="noreferrer">类似实现Symbol.iterator</a> <a class="header-anchor" href="#类似实现symbol-iterator" aria-hidden="true">#</a></h3><h2 id="迭代器的作用" tabindex="-1">迭代器的作用 <a class="header-anchor" href="#迭代器的作用" aria-hidden="true">#</a></h2><h3 id="for-of" tabindex="-1">for....of <a class="header-anchor" href="#for-of" aria-hidden="true">#</a></h3><h3 id="对象数据部署-symbol-iterator" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/7c379e7329f47f3855adc778f003eac5200fbbb8/learn-es6789/static/lesson2-9.js" target="_blank" rel="noreferrer">对象数据部署[Symbol.iterator]</a> <a class="header-anchor" href="#对象数据部署-symbol-iterator" aria-hidden="true">#</a></h3><h3 id="迭代器模式的数据可以进行" tabindex="-1">迭代器模式的数据可以进行 <a class="header-anchor" href="#迭代器模式的数据可以进行" aria-hidden="true">#</a></h3><p>数组解构 扩展操作符 Array.from() 创建map和set Promise.all和Promise.race yield *</p><h2 id="generator生成器" tabindex="-1">Generator生成器 <a class="header-anchor" href="#generator生成器" aria-hidden="true">#</a></h2><h3 id="yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据" tabindex="-1">yield * 后面可以是一个有序结构，也就是部署了[Symbol.iterator]的数据 <a class="header-anchor" href="#yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据" aria-hidden="true">#</a></h3><h3 id="使用yield重新写-symbol-iterator" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/yield%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8.ts" target="_blank" rel="noreferrer">使用yield重新写[Symbol.iterator]</a> <a class="header-anchor" href="#使用yield重新写-symbol-iterator" aria-hidden="true">#</a></h3><h3 id="使用yield遍历dom树" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/3b8835e34c3e68985d812ccaac27cb5ab811641e/learn-design-mode/src/%E9%81%8D%E5%8E%86dom%E6%A0%91.ts" target="_blank" rel="noreferrer">使用yield遍历DOM树</a> <a class="header-anchor" href="#使用yield遍历dom树" aria-hidden="true">#</a></h3>`,18),o=[r];function t(p,i,c,d,y,h){return e(),s("div",null,o)}const B=a(n,[["render",t]]);export{m as __pageData,B as default};
