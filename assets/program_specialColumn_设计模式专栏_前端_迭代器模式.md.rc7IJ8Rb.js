import{_ as s,c as i,o as e,aG as t}from"./chunks/framework.CdnsPyyz.js";const c=JSON.parse('{"title":"【前端】迭代器模式","description":"","frontmatter":{"title":"【前端】迭代器模式","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["JavaScript专栏"],"tags":["设计模式"]},"headers":[],"relativePath":"program/specialColumn/设计模式专栏/前端_迭代器模式.md","filePath":"program/specialColumn/设计模式专栏/前端_迭代器模式.md","lastUpdated":1684398517000}'),r={name:"program/specialColumn/设计模式专栏/前端_迭代器模式.md"};function l(n,a,h,o,p,k){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="【前端】迭代器模式" tabindex="-1">【前端】迭代器模式 <a class="header-anchor" href="#【前端】迭代器模式" aria-label="Permalink to &quot;【前端】迭代器模式&quot;">​</a></h1><h2 id="迭代器模式的实现" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.ts" target="_blank" rel="noreferrer">迭代器模式的实现</a> <a class="header-anchor" href="#迭代器模式的实现" aria-label="Permalink to &quot;[迭代器模式的实现](https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.ts)&quot;">​</a></h2><h2 id="迭代器模式的场景" tabindex="-1">迭代器模式的场景 <a class="header-anchor" href="#迭代器模式的场景" aria-label="Permalink to &quot;迭代器模式的场景&quot;">​</a></h2><h3 id="有序结构" tabindex="-1">有序结构 <a class="header-anchor" href="#有序结构" aria-label="Permalink to &quot;有序结构&quot;">​</a></h3><ul><li>字符串</li><li>数组</li><li>NodeList等DOM集合</li><li>Map</li><li>Set</li><li>arguments</li></ul><h2 id="symbol-interator" tabindex="-1">[Symbol.interator] <a class="header-anchor" href="#symbol-interator" aria-label="Permalink to &quot;[Symbol.interator]&quot;">​</a></h2><h3 id="通过获取迭代器访问数据" tabindex="-1">通过获取迭代器访问数据 <a class="header-anchor" href="#通过获取迭代器访问数据" aria-label="Permalink to &quot;通过获取迭代器访问数据&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> map</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;"> Map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">([[</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">k1</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">k111111</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">k2</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">k22222</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> mapInterator</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">Symbol</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">iterator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">]()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">mapInterator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="类似实现symbol-iterator" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/symbolIterator%E8%BF%AD%E4%BB%A3%E5%99%A8.ts" target="_blank" rel="noreferrer">类似实现Symbol.iterator</a> <a class="header-anchor" href="#类似实现symbol-iterator" aria-label="Permalink to &quot;[类似实现Symbol.iterator](https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/symbolIterator%E8%BF%AD%E4%BB%A3%E5%99%A8.ts)&quot;">​</a></h3><h2 id="迭代器的作用" tabindex="-1">迭代器的作用 <a class="header-anchor" href="#迭代器的作用" aria-label="Permalink to &quot;迭代器的作用&quot;">​</a></h2><h3 id="for-of" tabindex="-1">for....of <a class="header-anchor" href="#for-of" aria-label="Permalink to &quot;for....of&quot;">​</a></h3><h3 id="对象数据部署-symbol-iterator" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/7c379e7329f47f3855adc778f003eac5200fbbb8/learn-es6789/static/lesson2-9.js" target="_blank" rel="noreferrer">对象数据部署[Symbol.iterator]</a> <a class="header-anchor" href="#对象数据部署-symbol-iterator" aria-label="Permalink to &quot;[对象数据部署[Symbol.iterator]](https://github.com/zack-xy/try-projects/blob/7c379e7329f47f3855adc778f003eac5200fbbb8/learn-es6789/static/lesson2-9.js)&quot;">​</a></h3><h3 id="迭代器模式的数据可以进行" tabindex="-1">迭代器模式的数据可以进行 <a class="header-anchor" href="#迭代器模式的数据可以进行" aria-label="Permalink to &quot;迭代器模式的数据可以进行&quot;">​</a></h3><p>数组解构 扩展操作符 Array.from() 创建map和set Promise.all和Promise.race yield *</p><h2 id="generator生成器" tabindex="-1">Generator生成器 <a class="header-anchor" href="#generator生成器" aria-label="Permalink to &quot;Generator生成器&quot;">​</a></h2><h3 id="yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据" tabindex="-1">yield * 后面可以是一个有序结构，也就是部署了[Symbol.iterator]的数据 <a class="header-anchor" href="#yield-后面可以是一个有序结构-也就是部署了-symbol-iterator-的数据" aria-label="Permalink to &quot;yield * 后面可以是一个有序结构，也就是部署了[Symbol.iterator]的数据&quot;">​</a></h3><h3 id="使用yield重新写-symbol-iterator" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/yield%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8.ts" target="_blank" rel="noreferrer">使用yield重新写[Symbol.iterator]</a> <a class="header-anchor" href="#使用yield重新写-symbol-iterator" aria-label="Permalink to &quot;[使用yield重新写[Symbol.iterator]](https://github.com/zack-xy/try-projects/blob/main/learn-design-mode/src/yield%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8.ts)&quot;">​</a></h3><h3 id="使用yield遍历dom树" tabindex="-1"><a href="https://github.com/zack-xy/try-projects/blob/3b8835e34c3e68985d812ccaac27cb5ab811641e/learn-design-mode/src/%E9%81%8D%E5%8E%86dom%E6%A0%91.ts" target="_blank" rel="noreferrer">使用yield遍历DOM树</a> <a class="header-anchor" href="#使用yield遍历dom树" aria-label="Permalink to &quot;[使用yield遍历DOM树](https://github.com/zack-xy/try-projects/blob/3b8835e34c3e68985d812ccaac27cb5ab811641e/learn-design-mode/src/%E9%81%8D%E5%8E%86dom%E6%A0%91.ts)&quot;">​</a></h3>`,18)]))}const b=s(r,[["render",l]]);export{c as __pageData,b as default};
