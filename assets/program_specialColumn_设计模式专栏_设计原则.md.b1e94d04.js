import{_ as e,c as l,o as a,a as i}from"./app.db7222e2.js";const f=JSON.parse('{"title":"设计原则","description":"","frontmatter":{"title":"设计原则","author":"Zack Zheng","date":"2022/02/16 09:51","categories":["JavaScript专栏"],"tags":["设计原则"]},"headers":[{"level":2,"title":"UNIX/LINUX设计原则","slug":"unix-linux设计原则","link":"#unix-linux设计原则","children":[{"level":3,"title":"小即是美","slug":"小即是美","link":"#小即是美","children":[]},{"level":3,"title":"让每个程序只做好一件事","slug":"让每个程序只做好一件事","link":"#让每个程序只做好一件事","children":[]},{"level":3,"title":"快速建立原型","slug":"快速建立原型","link":"#快速建立原型","children":[]},{"level":3,"title":"舍弃高效率而取可移植性","slug":"舍弃高效率而取可移植性","link":"#舍弃高效率而取可移植性","children":[]},{"level":3,"title":"采用纯文本来存储数据（人可读性）","slug":"采用纯文本来存储数据-人可读性","link":"#采用纯文本来存储数据-人可读性","children":[]},{"level":3,"title":"充分利用软件的杠杆效应（软件复用）","slug":"充分利用软件的杠杆效应-软件复用","link":"#充分利用软件的杠杆效应-软件复用","children":[]},{"level":3,"title":"使用shell脚本来提高杠杆效应和可移植性","slug":"使用shell脚本来提高杠杆效应和可移植性","link":"#使用shell脚本来提高杠杆效应和可移植性","children":[]},{"level":3,"title":"避免强制性的用户界面（用户界面和系统分开）","slug":"避免强制性的用户界面-用户界面和系统分开","link":"#避免强制性的用户界面-用户界面和系统分开","children":[]},{"level":3,"title":"每个程序都称为过滤器","slug":"每个程序都称为过滤器","link":"#每个程序都称为过滤器","children":[]}]},{"level":2,"title":"SOLID五大设计原则","slug":"solid五大设计原则","link":"#solid五大设计原则","children":[{"level":3,"title":"S-单一职责原则","slug":"s-单一职责原则","link":"#s-单一职责原则","children":[]},{"level":3,"title":"O-开放封闭原则","slug":"o-开放封闭原则","link":"#o-开放封闭原则","children":[]},{"level":3,"title":"L-李氏置换原则","slug":"l-李氏置换原则","link":"#l-李氏置换原则","children":[]},{"level":3,"title":"I-接口独立原则","slug":"i-接口独立原则","link":"#i-接口独立原则","children":[]},{"level":3,"title":"D-依赖倒置原则","slug":"d-依赖倒置原则","link":"#d-依赖倒置原则","children":[]}]},{"level":2,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[]}],"relativePath":"program/specialColumn/设计模式专栏/设计原则.md","lastUpdated":1685688596000}'),h={name:"program/specialColumn/设计模式专栏/设计原则.md"},r=i('<h1 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-hidden="true">#</a></h1><h2 id="unix-linux设计原则" tabindex="-1">UNIX/LINUX设计原则 <a class="header-anchor" href="#unix-linux设计原则" aria-hidden="true">#</a></h2><h3 id="小即是美" tabindex="-1">小即是美 <a class="header-anchor" href="#小即是美" aria-hidden="true">#</a></h3><h3 id="让每个程序只做好一件事" tabindex="-1">让每个程序只做好一件事 <a class="header-anchor" href="#让每个程序只做好一件事" aria-hidden="true">#</a></h3><h3 id="快速建立原型" tabindex="-1">快速建立原型 <a class="header-anchor" href="#快速建立原型" aria-hidden="true">#</a></h3><h3 id="舍弃高效率而取可移植性" tabindex="-1">舍弃高效率而取可移植性 <a class="header-anchor" href="#舍弃高效率而取可移植性" aria-hidden="true">#</a></h3><h3 id="采用纯文本来存储数据-人可读性" tabindex="-1">采用纯文本来存储数据（人可读性） <a class="header-anchor" href="#采用纯文本来存储数据-人可读性" aria-hidden="true">#</a></h3><h3 id="充分利用软件的杠杆效应-软件复用" tabindex="-1">充分利用软件的杠杆效应（软件复用） <a class="header-anchor" href="#充分利用软件的杠杆效应-软件复用" aria-hidden="true">#</a></h3><h3 id="使用shell脚本来提高杠杆效应和可移植性" tabindex="-1">使用shell脚本来提高杠杆效应和可移植性 <a class="header-anchor" href="#使用shell脚本来提高杠杆效应和可移植性" aria-hidden="true">#</a></h3><h3 id="避免强制性的用户界面-用户界面和系统分开" tabindex="-1">避免强制性的用户界面（用户界面和系统分开） <a class="header-anchor" href="#避免强制性的用户界面-用户界面和系统分开" aria-hidden="true">#</a></h3><h3 id="每个程序都称为过滤器" tabindex="-1">每个程序都称为过滤器 <a class="header-anchor" href="#每个程序都称为过滤器" aria-hidden="true">#</a></h3><h2 id="solid五大设计原则" tabindex="-1">SOLID五大设计原则 <a class="header-anchor" href="#solid五大设计原则" aria-hidden="true">#</a></h2><h3 id="s-单一职责原则" tabindex="-1">S-单一职责原则 <a class="header-anchor" href="#s-单一职责原则" aria-hidden="true">#</a></h3><ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul><h3 id="o-开放封闭原则" tabindex="-1">O-开放封闭原则 <a class="header-anchor" href="#o-开放封闭原则" aria-hidden="true">#</a></h3><ul><li>对扩展开放，对修改封闭</li></ul><h3 id="l-李氏置换原则" tabindex="-1">L-李氏置换原则 <a class="header-anchor" href="#l-李氏置换原则" aria-hidden="true">#</a></h3><ul><li>子类能够覆盖父类</li><li>父类能够出现的地方子类就能出现</li></ul><h3 id="i-接口独立原则" tabindex="-1">I-接口独立原则 <a class="header-anchor" href="#i-接口独立原则" aria-hidden="true">#</a></h3><ul><li>保持接口单一独立，避免“胖接口”</li></ul><h3 id="d-依赖倒置原则" tabindex="-1">D-依赖倒置原则 <a class="header-anchor" href="#d-依赖倒置原则" aria-hidden="true">#</a></h3><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>适用方只关注接口而不关注具体类的实现</li></ul><h2 id="设计模式" tabindex="-1"><a href="https://zack-xy.github.io/knownNet/program/specialColumn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E6%A0%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB%E5%9B%BE.html" target="_blank" rel="noreferrer">设计模式</a> <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h2>',23),d=[r];function n(t,s,c,u,o,_){return a(),l("div",null,d)}const g=e(h,[["render",n]]);export{f as __pageData,g as default};
